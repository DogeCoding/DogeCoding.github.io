<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingDoge</title>
  <icon>https://www.gravatar.com/avatar/d091400ed78ec5cd8bf36bd5fff7bb8f</icon>
  <subtitle>关于开发、设计，关于生活。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codingdoge.cn/"/>
  <updated>2018-01-14T18:00:21.152Z</updated>
  <id>http://codingdoge.cn/</id>
  
  <author>
    <name>CodingDoge</name>
    <email>codingdoge@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Just a test</title>
    <link href="http://codingdoge.cn/2018/01/15/test/"/>
    <id>http://codingdoge.cn/2018/01/15/test/</id>
    <published>2018-01-14T18:00:21.152Z</published>
    <updated>2018-01-14T18:00:21.152Z</updated>
    
    <content type="html"><![CDATA[<p>aaa</p><h2 id="a-dfadf"><a href="#a-dfadf" class="headerlink" title="a dfadf"></a>a dfadf</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;aaa&lt;/p&gt;
&lt;h2 id=&quot;a-dfadf&quot;&gt;&lt;a href=&quot;#a-dfadf&quot; class=&quot;headerlink&quot; title=&quot;a dfadf&quot;&gt;&lt;/a&gt;a dfadf&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Advanced Swift 笔记 —— 內建集合類型</title>
    <link href="http://codingdoge.cn/2017/08/30/title:%20Advanced%20Swift%20%E7%AC%94%E8%AE%B0%20%E2%80%94%E2%80%94%20%E5%85%A7%E5%BB%BA%E9%9B%86%E5%90%88%E9%A1%9E%E5%9E%8B/"/>
    <id>http://codingdoge.cn/2017/08/30/title: Advanced Swift 笔记 —— 內建集合類型/</id>
    <published>2017-08-30T07:47:00.000Z</published>
    <updated>2018-01-13T12:22:39.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="數組-Array"><a href="#數組-Array" class="headerlink" title="數組(Array)"></a>數組(Array)</h2><p>盡量不要使用下標索引，如果下標越界會直接導致crash（在並發情況下尤其需要考慮）。</p><ul><li>迭代全部</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">array</span></div></pre></td></tr></table></figure><ul><li>迭代除了第一個元素以外的其餘部分</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">array</span>.dropFirst()</div></pre></td></tr></table></figure><ul><li>迭代除了最後5個元素以外的數組</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">array</span>.dropLast(<span class="number">5</span>)</div></pre></td></tr></table></figure><ul><li>列舉數組中的元素和對應下標</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">index</span>, value) <span class="keyword">in</span> <span class="keyword">array</span>.enumerated()</div></pre></td></tr></table></figure><ul><li>尋找一個指定元素的位置</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="keyword">array</span>.index &#123;</div><div class="line">    someMatchingLogic($0)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>對數組所有元素變形</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="keyword">array</span>.<span class="keyword">map</span> &#123;</div><div class="line">    someTransformation($0)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>篩選符合某個標準的元素</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = <span class="keyword">array</span>.filter &#123;</div><div class="line">    someCriteria($0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;數組-Array&quot;&gt;&lt;a href=&quot;#數組-Array&quot; class=&quot;headerlink&quot; title=&quot;數組(Array)&quot;&gt;&lt;/a&gt;數組(Array)&lt;/h2&gt;&lt;p&gt;盡量不要使用下標索引，如果下標越界會直接導致crash（在並發情況下尤其需要考慮）。&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Reading Notes" scheme="http://codingdoge.cn/tags/Reading-Notes/"/>
    
  </entry>
  
  <entry>
    <title>Brew Instruction</title>
    <link href="http://codingdoge.cn/2017/08/30/title:%20Brew%20Instruction/"/>
    <id>http://codingdoge.cn/2017/08/30/title: Brew Instruction/</id>
    <published>2017-08-30T06:26:00.000Z</published>
    <updated>2018-01-13T12:36:00.696Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://brew.sh" target="_blank" rel="noopener">Brew</a></p><table><thead><tr><th>brew help</th><th>查看有什麼可用的指令</th></tr></thead><tbody><tr><td>brew search [someSuit]</td><td>查詢有無someSuit</td></tr><tr><td>brew install [someSuit]</td><td>安裝someSuit</td></tr><tr><td>brew info [someSuit]</td><td>查看someSuit的訊息</td></tr><tr><td>brew uninstall [someSuit]</td><td>移除someSuit</td></tr><tr><td>brew list</td><td>列出已安裝套件</td></tr><tr><td>brew outdated</td><td>查詢那些套件已過期</td></tr><tr><td>brew cleanup -n</td><td>刪除舊的套件版本(-n 是顯示刪除的過程，可以了解有哪些套件被刪除了)</td></tr><tr><td>brew upgrade [someSuit]</td><td>更新someSuit</td></tr><tr><td>brew update &amp;&amp; brew upgrade &amp;&amp; brew doctor</td><td>更新Homebrew上面所有套件</td></tr><tr><td>brew dips [someSuit]</td><td>列出安裝someSuit需要的依賴套件</td></tr><tr><td>brew —prefix</td><td>查詢brew安裝的路徑</td></tr></tbody></table><blockquote><p>參考:<br><a href="https://gist.github.com/chiehwen/99c215f1ae3965743a4f" target="_blank" rel="noopener">chiehwen/Homebrew 指令詳解.md</a><br><a href="http://wjhwang.pixnet.net/blog/post/31998023-homebrew-指令" target="_blank" rel="noopener">Homebrew 指令</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://brew.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brew&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;brew help&lt;/th&gt;
&lt;th&gt;查看有什麼可用的指令&lt;/th&gt;
&lt;/tr&gt;
&lt;
      
    
    </summary>
    
      <category term="Shell" scheme="http://codingdoge.cn/categories/Shell/"/>
    
    
      <category term="Tool" scheme="http://codingdoge.cn/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Swift 笔记 —— Tips</title>
    <link href="http://codingdoge.cn/2017/08/20/title:%20Advanced%20Swift%20%E7%AC%94%E8%AE%B0%20%E2%80%94%E2%80%94%20Tips/"/>
    <id>http://codingdoge.cn/2017/08/20/title: Advanced Swift 笔记 —— Tips/</id>
    <published>2017-08-20T09:35:00.000Z</published>
    <updated>2018-01-13T12:23:01.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Curried-Function-柯里化函數"><a href="#Curried-Function-柯里化函數" class="headerlink" title="Curried Function 柯里化函數"></a>Curried Function 柯里化函數</h3><p>一个函数不是接受多个参数，而是只接受部分参数，然后返回一个接受其余参数的函数。</p><h3 id="Statically-Dispatched-靜態派發"><a href="#Statically-Dispatched-靜態派發" class="headerlink" title="Statically Dispatched 靜態派發"></a>Statically Dispatched 靜態派發</h3><p>定義在類或者協議中的函數就是方法(Method)，他們有一個隱式的<code>self</code>。不是方法的函數叫做自由函數(Free Function)。自由函数和那些在结构体上调用的方法是静态派发 (statically dispatched)的。对于这些函数的调用，在编译的时候就已经确定了。对于静态派发的调用，编译器可能能够内联 (inline)这些函数，也就是说，完全不去做函数调用，而是将这部分代码替换为需要执行的函数。静态派发还能够帮助编译器丢弃或者简化那些在编译时就能确定不会被实际执行的代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Curried-Function-柯里化函數&quot;&gt;&lt;a href=&quot;#Curried-Function-柯里化函數&quot; class=&quot;headerlink&quot; title=&quot;Curried Function 柯里化函數&quot;&gt;&lt;/a&gt;Curried Function 柯里化
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Reading Notes" scheme="http://codingdoge.cn/tags/Reading-Notes/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer —— 二叉搜索树的第k个结点</title>
    <link href="http://codingdoge.cn/2017/08/04/title:%20%E5%89%91%E6%8C%87Offer%20%E2%80%94%E2%80%94%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://codingdoge.cn/2017/08/04/title: 剑指Offer —— 二叉搜索树的第k个结点/</id>
    <published>2017-08-04T01:56:00.000Z</published>
    <updated>2018-01-14T16:29:06.979Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源:<strong><a href="https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a?tpId=13&amp;tqId=11215&amp;tPage=4&amp;rp=4&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">牛客网</a></strong>  </p></blockquote><hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>递归</li><li>迭代<h3 id="way1"><a href="#way1" class="headerlink" title="way1"></a>way1</h3>中序遍历，找到第k个结点。完全性的模拟左根右，注意返回结果的处理。</li></ol><pre><code class="//">TreeNode* KthNode(TreeNode* pRoot, int k) {    if (pRoot) {        TreeNode *node = KthNode(pRoot-&gt;left, k);        if (node) return node;        index++;        if (index == k) return pRoot;        node = KthNode(pRoot-&gt;right, k);        if (node) return node;    }    return NULL;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源:&lt;strong&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a?tpId=13&amp;amp;tqId=11215&amp;amp;tPage=4&amp;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
      <category term="剑指Offer" scheme="http://codingdoge.cn/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>错误处理</title>
    <link href="http://codingdoge.cn/2017/08/03/title:%20%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://codingdoge.cn/2017/08/03/title: 错误处理/</id>
    <published>2017-08-03T02:47:00.000Z</published>
    <updated>2018-01-13T12:26:37.175Z</updated>
    
    <content type="html"><![CDATA[<p>错误处理（Error handling）是响应错误以及从错误中恢复的过程。Swift 提供了在运行时对可恢复错误的抛出、捕获、传递和操作的一等公民支持。</p><p>Swift 中有4种处理错误的方式</p><ul><li>把函数抛出的错误传递给调用此函数的代码</li><li>用<code>do-catch</code>语句处理错误</li><li>将错误作为可选类型处理</li><li>或者断言此错误根本不会发生</li></ul><blockquote><p>Swift 中的错误处理并不涉及解除调用栈，这是一个计算代价高昂的过程。就此而言，throw语句的性能特性是可以和return语句相媲美的。</p></blockquote><p>一个 throwing 函数可以在其内部抛出错误，并将错误传递到函数<strong>被调用时的作用域</strong>。</p><blockquote><p>参考:<br><a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noopener"> The Swift Programming Language 中文版</a><br><a href="http://swifter.tips" target="_blank" rel="noopener">SWIFT 的必备 TIP</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;错误处理（Error handling）是响应错误以及从错误中恢复的过程。Swift 提供了在运行时对可恢复错误的抛出、捕获、传递和操作的一等公民支持。&lt;/p&gt;
&lt;p&gt;Swift 中有4种处理错误的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把函数抛出的错误传递给调用此函数的代码&lt;/l
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://codingdoge.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Dispatch 在swift中的使用</title>
    <link href="http://codingdoge.cn/2017/08/03/title:%20Dispatch%20%E5%9C%A8swift%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://codingdoge.cn/2017/08/03/title: Dispatch 在swift中的使用/</id>
    <published>2017-08-03T01:49:00.000Z</published>
    <updated>2018-01-13T12:28:30.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><p>当group里所有事件都完成GCD API有两种方式发送通知，第一种是dispatch_group_wait，会阻塞当前进程，等所有任务都完成或等待超时。第二种方法是使用dispatch_group_notify，异步执行闭包，不会阻塞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">func downloadPhotosWithCompletion(completion: BatchPhotoDownloadingCompletionClosure?) &#123;</div><div class="line">     dispatch_async(GlobalUserInitiatedQueue) &#123; // 因为dispatch_group_wait会租塞当前进程，所以要使用dispatch_async将整个方法要放到后台队列才能够保证主线程不被阻塞</div><div class="line">          var storedError: NSError!</div><div class="line">          var downloadGroup = dispatch_group_create() // 创建一个dispatch group</div><div class="line"></div><div class="line">          for address in [OverlyAttachedGirlfriendURLString,</div><div class="line">               SuccessKidURLString,</div><div class="line">               LotsOfFacesURLString]</div><div class="line">          &#123;</div><div class="line">               let url = NSURL(string: address)</div><div class="line">               dispatch_group_enter(downloadGroup) // dispatch_group_enter是通知dispatch group任务开始了，dispatch_group_enter和dispatch_group_leave是成对调用，不然程序就崩溃了。</div><div class="line">               let photo = DownloadPhoto(url: url!) &#123;</div><div class="line">                    image, error in</div><div class="line">                    if let error = error &#123;</div><div class="line">                         storedError = error</div><div class="line">                    &#125;</div><div class="line">                    dispatch_group_leave(downloadGroup) // 保持和dispatch_group_enter配对。通知任务已经完成</div><div class="line">               &#125;</div><div class="line">               PhotoManager.sharedManager.addPhoto(photo)</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          dispatch_group_wait(downloadGroup, DISPATCH_TIME_FOREVER) // dispatch_group_wait等待所有任务都完成直到超时。如果任务完成前就超时了，函数会返回一个非零值，可以通过返回值判断是否超时。也可以用DISPATCH_TIME_FOREVER表示一直等。</div><div class="line">          dispatch_async(GlobalMainQueue) &#123; // 这里可以保证所有图片任务都完成，然后在main queue里加入完成后要处理的闭包，会在main queue里执行。</div><div class="line">               if let completion = completion &#123; // 执行闭包内容</div><div class="line">                    completion(error: storedError)</div><div class="line">               &#125;</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Serial-Queues"><a href="#Serial-Queues" class="headerlink" title="Serial Queues"></a>Serial Queues</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private let serialQueue = DispatchQueue(label: “serialQueue”)</div><div class="line">private var dictionary: [String: Any] = [:]</div><div class="line"></div><div class="line">public func set(_ value: Any, forKey key: String) &#123;</div><div class="line">    serialQueue.sync &#123;</div><div class="line">        dictionary[key] = value</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public func object(forKey key: String) -&gt; Any? &#123;</div><div class="line">    var result: Any?</div><div class="line">       </div><div class="line">    serialQueue.sync &#123;</div><div class="line">        result = storage[key]</div><div class="line">    &#125;</div><div class="line">    // returns after serialQueue is finished operation</div><div class="line">    // beacuse serialQueue is run synchronously</div><div class="line">    return result</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Concurrent-Queues"><a href="#Concurrent-Queues" class="headerlink" title="Concurrent Queues"></a>Concurrent Queues</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private let concurrentQueue = DispatchQueue(label: &quot;concurrentQueue&quot;, attributes: .concurrent)</div><div class="line">private var dictionary: [String: Any] = [:]</div><div class="line">    </div><div class="line">public func set(_ value: Any?, forKey key: String) &#123;</div><div class="line">    concurrentQueue.async &#123;</div><div class="line">        self.storage[key] = value</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public func object(forKey key: String) -&gt; Any? &#123;</div><div class="line">    var result: Any?</div><div class="line"></div><div class="line">    concurrentQueue.sync &#123;</div><div class="line">        result = storage[key]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // returns after concurrentQueue is finished operation</div><div class="line">    // beacuse concurrentQueue is run synchronously</div><div class="line">    return result</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Concurrent-Queue-with-Barrier"><a href="#Concurrent-Queue-with-Barrier" class="headerlink" title="Concurrent Queue with Barrier"></a>Concurrent Queue with Barrier</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">private let concurrentQueue = DispatchQueue(label: &quot;concurrentQueue&quot;, attributes: .concurrent)</div><div class="line">private var dictionary: [String: Any] = [:]</div><div class="line">    </div><div class="line">public func set(_ value: Any?, forKey key: String) &#123;</div><div class="line">    // .barrier flag ensures that within the queue all reading is done</div><div class="line">    // before the below writing is performed and</div><div class="line">    // pending readings start after below writing is performed</div><div class="line">    concurrentQueue.async(flags: .barrier) &#123;</div><div class="line">        self.storage[key] = value</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public func object(forKey key: String) -&gt; Any? &#123;</div><div class="line">    var result: Any?</div><div class="line"></div><div class="line">    concurrentQueue.sync &#123;</div><div class="line">        result = storage[key]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // returns after concurrentQueue is finished operation</div><div class="line">    // beacuse concurrentQueue is run synchronously</div><div class="line">    return result</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">typealias <span class="function"><span class="title">Task</span> = <span class="params">(_ cancel: Bool)</span> -&gt;</span> Void</div><div class="line"></div><div class="line">    func delay<span class="function"><span class="params">(time: TimeInterval, task: @escaping ()-&gt;())</span> -&gt;</span> Task? &#123;</div><div class="line">        func dispatch_later<span class="function"><span class="params">(block: @escaping ()-&gt;())</span> &#123;</span></div><div class="line">            <span class="title">DispatchQueue</span>.<span class="title">main</span>.<span class="title">asyncAfter</span><span class="params">(deadline: DispatchTime.now()+time, execute: block)</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="title">var</span> <span class="title">closure</span>: <span class="params">(()-&gt;())</span>? = <span class="title">task</span></div><div class="line">        <span class="title">var</span> <span class="title">result</span>: <span class="title">Task</span>?</div><div class="line"></div><div class="line">        <span class="title">let</span> <span class="title">delayedClosure</span>: <span class="title">Task</span> = &#123; <span class="title">cancel</span> <span class="title">in</span></div><div class="line">            <span class="title">if</span> <span class="title">let</span> <span class="title">internalClosure</span> = <span class="title">closure</span> &#123;</div><div class="line">                <span class="title">if</span> <span class="title">cancel</span> == <span class="title">false</span> &#123;</div><div class="line">                    <span class="title">DispatchQueue</span>.<span class="title">main</span>.<span class="title">async</span> &#123;</div><div class="line">                        <span class="title">internalClosure</span><span class="params">()</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="title">closure</span> = <span class="title">nil</span></div><div class="line">            <span class="title">result</span> = <span class="title">nil</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="title">result</span> = <span class="title">delayedClosure</span></div><div class="line">        <span class="title">dispatch_later</span> &#123;</div><div class="line">            <span class="title">if</span> <span class="title">let</span> <span class="title">delayedClosure</span> = <span class="title">result</span> &#123;</div><div class="line">                <span class="title">delayedClosure</span><span class="params">(<span class="literal">false</span>)</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="title">return</span> <span class="title">result</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="title">func</span> <span class="title">cancel</span><span class="params">(task: Task?)</span> &#123;</div><div class="line">        <span class="title">task</span>?<span class="params">(<span class="literal">true</span>)</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="网络场景异步开启下载、取消下载，开始下载前保证没有遗留下载任务"><a href="#网络场景异步开启下载、取消下载，开始下载前保证没有遗留下载任务" class="headerlink" title="网络场景异步开启下载、取消下载，开始下载前保证没有遗留下载任务"></a>网络场景异步开启下载、取消下载，开始下载前保证没有遗留下载任务</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">fileprivate</span> <span class="keyword">let</span> barrierQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"com.meitu.meipu.videoCache.barrierQueue"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloader</span><span class="params">(url: URL)</span></span> &#123;</div><div class="line">        barrierQueue.sync &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="comment">// add downloader task</span></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</div><div class="line">    barrierQueue.async(group: <span class="literal">nil</span>, qos: .<span class="keyword">default</span>, flags: .barrier) &#123;</div><div class="line">        <span class="comment">// cacle task    </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参考:<br><a href="https://swiftcafe.io/2016/10/16/swift-gcd/" target="_blank" rel="noopener">GCD 在 Swift 3 中的玩儿法</a><br><a href="http://swift.gg/2016/05/05/the-gcd-handbook/" target="_blank" rel="noopener">GCD 使用指南</a><br><a href="http://swift.gg/2016/11/30/grand-central-dispatch/" target="_blank" rel="noopener">Swift 3 中的 GCD 与 Dispatch Queue</a><br><a href="https://www.appcoda.com.tw/grand-central-dispatch/" target="_blank" rel="noopener">Swift 3學習指南：重新認識GCD應用</a><br><a href="http://blog.csdn.net/hello_hwc/article/details/54293280" target="_blank" rel="noopener">GCD精讲（Swift 3）</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建队列&quot;&gt;&lt;a href=&quot;#创建队列&quot; class=&quot;headerlink&quot; title=&quot;创建队列&quot;&gt;&lt;/a&gt;创建队列&lt;/h2&gt;&lt;p&gt;当group里所有事件都完成GCD API有两种方式发送通知，第一种是dispatch_group_wait，会阻塞当前进程
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://codingdoge.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Dispatch</title>
    <link href="http://codingdoge.cn/2017/08/02/title:%20Dispatch/"/>
    <id>http://codingdoge.cn/2017/08/02/title: Dispatch/</id>
    <published>2017-08-02T12:01:00.000Z</published>
    <updated>2018-01-13T04:59:21.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Execute code concurrently on multicore hardware by submitting work to dispatch queues managed by the system.</p></blockquote><p>在多核硬件上，通过提交任务到由这个系统管理的派遣队列上，并发的执行代码。</p><p>一种把保证回调会在主线程执行的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#ifndef dispatch_main_async_safe</div><div class="line">#define dispatch_main_async_safe(block)\</div><div class="line">    if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) &#123;\</div><div class="line">    block();\</div><div class="line">    &#125; else &#123;\</div><div class="line">    dispatch_async(dispatch_get_main_queue(), block);\</div><div class="line">    &#125;</div><div class="line">#endif</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line">for(id obj in array)</div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self doSomethingIntensiveWith:obj];</div><div class="line">    &#125;);</div><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">dispatch_release(group);</div><div class="line"> </div><div class="line">[self doSomethingWith:array];</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line">for(id obj in array)</div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self doSomethingIntensiveWith:obj];</div><div class="line">    &#125;);</div><div class="line">dispatch_group_notify(group, queue, ^&#123;</div><div class="line">    [self doSomethingWith:array];</div><div class="line">&#125;);</div><div class="line">dispatch_release(group);</div></pre></td></tr></table></figure><h3 id="dispatch-barrier-sync和dispatch-barrier-async"><a href="#dispatch-barrier-sync和dispatch-barrier-async" class="headerlink" title="dispatch_barrier_sync和dispatch_barrier_async"></a>dispatch_barrier_sync和dispatch_barrier_async</h3><table><thead><tr><th>common</th><th>different</th></tr></thead><tbody><tr><td>等待在它前面插入队列的任务先执行完</td><td>dispatch_barrier_sync将自己的任务插入到队列的时候，需要等待自己的任务结束之后才会继续插入被写在它后面的任务，然后执行它们</td></tr><tr><td>等待他们自己的任务执行完再执行后面的任务</td><td>dispatch_barrier_async将自己的任务插入到队列之后，不会等待自己的任务结束，它会继续把后面的任务插入到队列，然后等待自己的任务结束后才执行后面任务</td></tr></tbody></table><blockquote><p>参考:<br><a href="http://www.dreamingwish.com/article/grand-central-dispatch-basic-1.html" target="_blank" rel="noopener">GCD入门（一）: 基本概念和Dispatch Queue</a><br><a href="https://bestswifter.com/deep-gcd/" target="_blank" rel="noopener">深入理解GCD</a><br><a href="https://objccn.io/issue-2-3/" target="_blank" rel="noopener">底层并发 API</a><br><a href="http://blog.jimmyis.in/dispatch_once/" target="_blank" rel="noopener">GCD 中 dispatch_once 的性能与实现</a><br><a href="http://www.devtalking.com/articles/read-concurrency-programming-guide-1/" target="_blank" rel="noopener">读 Concurrency Programming Guide 笔记（一）</a><br><a href="https://github.com/ming1016/study/wiki/iOS并发编程" target="_blank" rel="noopener">iOS并发编程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Execute code concurrently on multicore hardware by submitting work to dispatch queues managed by the system.&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="多线程" scheme="http://codingdoge.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer —— 最小的k个数</title>
    <link href="http://codingdoge.cn/2017/08/01/title:%20%E5%89%91%E6%8C%87Offer%20%E2%80%94%E2%80%94%20%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <id>http://codingdoge.cn/2017/08/01/title: 剑指Offer —— 最小的k个数/</id>
    <published>2017-08-01T02:20:00.000Z</published>
    <updated>2018-01-14T16:32:50.507Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。(很典型的题目了)</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>插入或者冒泡排序，优化点在记录已排好的个数(O(n*k))</li><li>最小堆(O(nlogk))</li><li>快排思想(O(n))</li></ol><h3 id="way1"><a href="#way1" class="headerlink" title="way1"></a>way1</h3><p>不上代码了。</p><h3 id="way2"><a href="#way2" class="headerlink" title="way2"></a>way2</h3><p>上个建堆的算法，通用、解耦、易测试😂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">void HeapAdjust(int H[],int s, int length)  </div><div class="line">&#123;  </div><div class="line">    int tmp  = H[s];  </div><div class="line">    int child = 2*s+1; //左孩子结点的位置。(i+1 为当前调整结点的右孩子结点的位置)  </div><div class="line">    while (child &lt; length) &#123;  </div><div class="line">        if(child+1 &lt;length &amp;&amp; H[child]&lt;H[child+1]) &#123; // 如果右孩子大于左孩子(找到比当前待调整结点大的孩子结点)  </div><div class="line">            ++child ;  </div><div class="line">        &#125;  </div><div class="line">        if(H[s]&lt;H[child]) &#123;  // 如果较大的子结点大于父结点  </div><div class="line">            H[s] = H[child]; // 那么把较大的子结点往上移动，替换它的父结点  </div><div class="line">            s = child;       // 重新设置s ,即待调整的下一个结点的位置  </div><div class="line">            child = 2*s+1;  </div><div class="line">        &#125;  else &#123;            // 如果当前待调整结点大于它的左右孩子，则不需要调整，直接退出  </div><div class="line">             break;  </div><div class="line">        &#125;  </div><div class="line">        H[s] = tmp;         // 当前待调整的结点放到比其大的孩子结点位置上  </div><div class="line">    &#125;  </div><div class="line">    print(H,length);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">/** </div><div class="line"> * 初始堆进行调整 </div><div class="line"> * 将H[0..length-1]建成堆 </div><div class="line"> * 调整完之后第一个元素是序列的最小的元素 </div><div class="line"> */  </div><div class="line">void BuildingHeap(int H[], int length)  </div><div class="line">&#123;   </div><div class="line">    //最后一个有孩子的节点的位置 i=  (length -1) / 2  </div><div class="line">    for (int i = (length -1) / 2 ; i &gt;= 0; i--)  </div><div class="line">    &#123;</div><div class="line">    cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; endl;</div><div class="line">    HeapAdjust(H,i,length);</div><div class="line">    &#125;</div><div class="line">&#125;  </div><div class="line">/** </div><div class="line"> * 堆排序算法 </div><div class="line"> */  </div><div class="line">void HeapSort(int H[],int length)  </div><div class="line">&#123;  </div><div class="line">    //初始堆  </div><div class="line">    BuildingHeap(H, length);  </div><div class="line">    //从最后一个元素开始对序列进行调整  </div><div class="line">    for (int i = length - 1; i &gt; 0; --i)  </div><div class="line">    &#123;  </div><div class="line">        //交换堆顶元素H[0]和堆中最后一个元素  </div><div class="line">        int temp = H[i]; H[i] = H[0]; H[0] = temp;  </div><div class="line">        //每次交换堆顶元素和堆中最后一个元素之后，都要对堆进行调整  </div><div class="line">        HeapAdjust(H,0,i);  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="way3"><a href="#way3" class="headerlink" title="way3"></a>way3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">int Partition(vector&lt;int&gt; &amp;input, int begin, int end)</div><div class="line">&#123;</div><div class="line">trueint first = begin;</div><div class="line">trueint last = end;</div><div class="line">trueint pivot = input[first];</div><div class="line">truewhile (first &lt; last)</div><div class="line">true&#123;</div><div class="line">truetruewhile (first &lt; last &amp;&amp; input[last] &gt;= pivot) last--;</div><div class="line">truetrueinput[first] = input[last];</div><div class="line">truetruewhile (first &lt; last &amp;&amp; input[first] &lt;= pivot) first++;</div><div class="line">truetrueinput[last] = input[first];</div><div class="line">true&#125;</div><div class="line">trueinput[first] = pivot;</div><div class="line">truereturn first;</div><div class="line">&#125;</div><div class="line">vector&lt;int&gt; GetLeastNumbers_Solution(vector&lt;int&gt; &amp;input, int k)</div><div class="line">&#123;</div><div class="line">trueint len=input.size();</div><div class="line">truevector&lt;int&gt; res;</div><div class="line">trueif(len==0||k&gt;len||k&lt;=0) return res;</div><div class="line">trueif(len==k) return input;</div><div class="line">trueint start=0;</div><div class="line">trueint end=len-1;</div><div class="line">trueint index=Partition(input,start,end);</div><div class="line">truewhile(index!=(k-1))</div><div class="line">true&#123;</div><div class="line">truetrueif(index&gt;k-1)</div><div class="line">truetrue&#123;</div><div class="line">truetruetrueend=index-1;</div><div class="line">truetruetrueindex=Partition(input,start,end);</div><div class="line">truetrue&#125;</div><div class="line">truetrueelse</div><div class="line">truetrue&#123;</div><div class="line">truetruetruestart=index+1;</div><div class="line">truetruetrueindex=Partition(input,start,end);</div><div class="line">truetrue&#125;</div><div class="line">true&#125;</div><div class="line">truefor (int i = 0; i &lt; k; i++)</div><div class="line">truetrueres.push_back(input[i]);</div><div class="line">truereturn res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
      <category term="剑指Offer" scheme="http://codingdoge.cn/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>并发(concurrency)和并行(parallelism)</title>
    <link href="http://codingdoge.cn/2017/07/27/title:%20%E5%B9%B6%E5%8F%91(concurrency)%E5%92%8C%E5%B9%B6%E8%A1%8C(parallelism)/"/>
    <id>http://codingdoge.cn/2017/07/27/title: 并发(concurrency)和并行(parallelism)/</id>
    <published>2017-07-27T04:29:00.000Z</published>
    <updated>2018-01-13T14:00:58.116Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“并发”指的是程序的结构，“并行”指的是程序运行时的状态</p></blockquote><h2 id="并行（parallelism）"><a href="#并行（parallelism）" class="headerlink" title="并行（parallelism）"></a>并行（parallelism）</h2><p>这个概念很好理解。所谓并行，就是同时执行的意思，无需过度解读。判断程序是否处于并行的状态，就看同一时刻是否有超过一个“工作单位”在运行就好了。所以，单线程永远无法达到并行状态。</p><p>要达到并行状态，最简单的就是利用多线程和多进程。</p><h2 id="并发（concurrency）"><a href="#并发（concurrency）" class="headerlink" title="并发（concurrency）"></a>并发（concurrency）</h2><p>要理解“并发”这个概念，必须得清楚，并发指的是程序的“结构”。当我们说这个程序是并发的，实际上，这句话应当表述成“这个程序采用了支持并发的设计”。好，既然并发指的是人为设计的结构，那么怎样的程序结构才叫做支持并发的设计？</p><p><strong>正确的并发设计的标准是：使多个操作可以在重叠的时间段内进行(two tasks can start, run, and complete in overlapping time periods)。</strong></p><p>这句话的重点有两个。我们先看“（操作）在重叠的时间段内进行”这个概念。它是否就是我们前面说到的并行呢？是，也不是。并行，当然是在重叠的时间段内执行，但是另外一种执行模式，也属于在重叠时间段内进行。这就是<a href="https://zh.wikipedia.org/wiki/协程" target="_blank" rel="noopener">协程</a>。</p><p>使用协程时，程序的执行看起来往往是这个样子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15011301882675.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>task1, task2 是两段不同的代码，比如两个函数，其中黑色块代表某段代码正在执行。注意，这里从始至终，在任何一个时间点上都只有一段代码在执行，但是，由于 task1 和 task2 在重叠的时间段内执行，所以这是一个支持并发的设计。与并行不同，单核单线程能支持并发。</p><blockquote><p><strong>Different concurrent designs enable different ways to parallelize</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;“并发”指的是程序的结构，“并行”指的是程序运行时的状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;并行（parallelism）&quot;&gt;&lt;a href=&quot;#并行（parallelism）&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="OS" scheme="http://codingdoge.cn/categories/OS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 保持界面流畅的技巧</title>
    <link href="http://codingdoge.cn/2017/07/25/title:%20iOS%20%E4%BF%9D%E6%8C%81%E7%95%8C%E9%9D%A2%E6%B5%81%E7%95%85%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>http://codingdoge.cn/2017/07/25/title: iOS 保持界面流畅的技巧/</id>
    <published>2017-07-25T06:21:00.000Z</published>
    <updated>2018-01-14T16:35:13.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="noopener">iOS 保持界面流畅的技巧</a></p></blockquote><h2 id="CPU-资源消耗原因和解决方案"><a href="#CPU-资源消耗原因和解决方案" class="headerlink" title="CPU 资源消耗原因和解决方案"></a>CPU 资源消耗原因和解决方案</h2><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><p>对象的创建会分配内存、调整属性、甚至还有读取文件等操作，比较消耗 CPU 资源。尽量用轻量的对象代替重量的对象，可以对性能有所优化。比如 CALayer 比 UIView 要轻量许多，那么不需要响应触摸事件的控件，用 CALayer 显示会更加合适。如果对象不涉及 UI 操作，则尽量放到后台线程去创建，但可惜的是包含有 CALayer 的控件，都只能在主线程创建和操作。通过 Storyboard 创建视图对象时，其资源消耗会比直接通过代码创建对象要大非常多，在性能敏感的界面里，Storyboard 并不是一个好的技术选择。</p><p>尽量推迟对象创建的时间，并把对象的创建分散到多个任务中去。尽管这实现起来比较麻烦，并且带来的优势并不多，但如果有能力做，还是要尽量尝试一下。如果对象可以复用，并且复用的代价比释放、创建新对象要小，那么这类对象应当尽量放到一个缓存池里复用。</p><h3 id="对象调整"><a href="#对象调整" class="headerlink" title="对象调整"></a>对象调整</h3><p>对象的调整也经常是消耗 CPU 资源的地方。这里特别说一下 CALayer：CALayer 内部并没有属性，当调用属性方法时，它内部是通过运行时 resolveInstanceMethod 为对象临时添加一个方法，并把对应属性值保存到内部的一个 Dictionary 里，同时还会通知 delegate、创建动画等等，非常消耗资源。UIView 的关于显示相关的属性（比如 frame/bounds/transform）等实际上都是 CALayer 属性映射来的，所以对 UIView 的这些属性进行调整时，消耗的资源要远大于一般的属性。对此你在应用中，应该尽量减少不必要的属性修改。</p><p>当视图层次调整时，UIView、CALayer 之间会出现很多方法调用与通知，所以在优化性能时，应该尽量避免调整视图层次、添加和移除视图。</p><h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><p>对象的销毁虽然消耗资源不多，但累积起来也是不容忽视的。通常当容器类持有大量对象时，其销毁时的资源消耗就非常明显。同样的，如果对象可以放到后台线程去释放，那就挪到后台线程去。这里有个小 Tip：把对象捕获到 block 中，然后扔到后台队列去随便发送个消息以避免编译器警告，就可以让对象在后台线程销毁了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSArray *tmp = self.array;</div><div class="line">self.array = nil;</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    [tmp class];</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="布局计算"><a href="#布局计算" class="headerlink" title="布局计算"></a>布局计算</h3><p>视图布局的计算是 App 中最为常见的消耗 CPU 资源的地方。如果能在后台线程提前计算好视图布局、并且对视图布局进行缓存，那么这个地方基本就不会产生性能问题了。</p><p>不论通过何种技术对视图进行布局，其最终都会落到对 UIView.frame/bounds/center 等属性的调整上。上面也说过，对这些属性的调整非常消耗资源，所以尽量提前计算好布局，在需要时一次性调整好对应属性，而不要多次、频繁的计算和调整这些属性。</p><h3 id="Autolayout"><a href="#Autolayout" class="headerlink" title="Autolayout"></a>Autolayout</h3><p>Autolayout 是苹果本身提倡的技术，在大部分情况下也能很好的提升开发效率，但是 Autolayout 对于复杂视图来说常常会产生严重的性能问题。随着视图数量的增长，Autolayout 带来的 CPU 消耗会呈指数级上升。具体数据可以看这个文章：<a href="http://pilky.me/36/。" target="_blank" rel="noopener">http://pilky.me/36/。</a> 如果你不想手动调整 frame 等属性，你可以用一些工具方法替代（比如常见的 left/right/top/bottom/width/height 快捷属性），或者使用 ComponentKit、AsyncDisplayKit 等框架。</p><h3 id="文本计算"><a href="#文本计算" class="headerlink" title="文本计算"></a>文本计算</h3><p>如果一个界面中包含大量文本（比如微博微信朋友圈等），文本的宽高计算会占用很大一部分资源，并且不可避免。如果你对文本显示没有特殊要求，可以参考下 UILabel 内部的实现方式：用 [NSAttributedString boundingRectWithSize:options:context:] 来计算文本宽高，用 -[NSAttributedString drawWithRect:options:context:] 来绘制文本。尽管这两个方法性能不错，但仍旧需要放到后台线程进行以避免阻塞主线程。</p><p>如果你用 CoreText 绘制文本，那就可以先生成 CoreText 排版对象，然后自己计算了，并且 CoreText 对象还能保留以供稍后绘制使用。</p><h3 id="文本渲染"><a href="#文本渲染" class="headerlink" title="文本渲染"></a>文本渲染</h3><p>屏幕上能看到的所有文本内容控件，包括 UIWebView，在底层都是通过 CoreText 排版、绘制为 Bitmap 显示的。常见的文本控件 （UILabel、UITextView 等），其排版和绘制都是在主线程进行的，当显示大量文本时，CPU 的压力会非常大。对此解决方案只有一个，那就是自定义文本控件，用 TextKit 或最底层的 CoreText 对文本异步绘制。尽管这实现起来非常麻烦，但其带来的优势也非常大，CoreText 对象创建好后，能直接获取文本的宽高等信息，避免了多次计算（调整 UILabel 大小时算一遍、UILabel 绘制时内部再算一遍）；CoreText 对象占用内存较少，可以缓存下来以备稍后多次渲染。</p><h3 id="图片的解码"><a href="#图片的解码" class="headerlink" title="图片的解码"></a>图片的解码</h3><p>当你用 UIImage 或 CGImageSource 的那几个方法创建图片时，图片数据并不会立刻解码。图片设置到 UIImageView 或者 CALayer.contents 中去，并且 CALayer 被提交到 GPU 前，CGImage 中的数据才会得到解码。这一步是发生在主线程的，并且不可避免。如果想要绕开这个机制，常见的做法是在后台线程先把图片绘制到 CGBitmapContext 中，然后从 Bitmap 直接创建图片。目前常见的网络图片库都自带这个功能。</p><h3 id="图像的绘制"><a href="#图像的绘制" class="headerlink" title="图像的绘制"></a>图像的绘制</h3><p>图像的绘制通常是指用那些以 CG 开头的方法把图像绘制到画布中，然后从画布创建图片并显示这样一个过程。这个最常见的地方就是 [UIView drawRect:] 里面了。由于 CoreGraphic 方法通常都是线程安全的，所以图像的绘制可以很容易的放到后台线程进行。一个简单异步绘制的过程大致如下（实际情况会比这个复杂得多，但原理基本一致）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)display &#123;</div><div class="line">    dispatch_async(backgroundQueue, ^&#123;</div><div class="line">        CGContextRef ctx = CGBitmapContextCreate(...);</div><div class="line">        // draw in context...</div><div class="line">        CGImageRef img = CGBitmapContextCreateImage(ctx);</div><div class="line">        CFRelease(ctx);</div><div class="line">        dispatch_async(mainQueue, ^&#123;</div><div class="line">            layer.contents = img;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="GPU-资源消耗原因和解决方案"><a href="#GPU-资源消耗原因和解决方案" class="headerlink" title="GPU 资源消耗原因和解决方案"></a>GPU 资源消耗原因和解决方案</h2><p>相对于 CPU 来说，GPU 能干的事情比较单一：接收提交的纹理（Texture）和顶点描述（三角形），应用变换（transform）、混合并渲染，然后输出到屏幕上。通常你所能看到的内容，主要也就是纹理（图片）和形状（三角模拟的矢量图形）两类。</p><h3 id="纹理的渲染"><a href="#纹理的渲染" class="headerlink" title="纹理的渲染"></a>纹理的渲染</h3><p>所有的 Bitmap，包括图片、文本、栅格化的内容，最终都要由内存提交到显存，绑定为 GPU Texture。不论是提交到显存的过程，还是 GPU 调整和渲染 Texture 的过程，都要消耗不少 GPU 资源。当在较短时间显示大量图片时（比如 TableView 存在非常多的图片并且快速滑动时），CPU 占用率很低，GPU 占用非常高，界面仍然会掉帧。避免这种情况的方法只能是尽量减少在短时间内大量图片的显示，尽可能将多张图片合成为一张进行显示。</p><p>当图片过大，超过 GPU 的最大纹理尺寸时，图片需要先由 CPU 进行预处理，这对 CPU 和 GPU 都会带来额外的资源消耗。目前来说，iPhone 4S 以上机型，纹理尺寸上限都是 4096x4096，更详细的资料可以看这里：iosres.com。所以，尽量不要让图片和视图的大小超过这个值。</p><h3 id="视图的混合-Composing"><a href="#视图的混合-Composing" class="headerlink" title="视图的混合 (Composing)"></a>视图的混合 (Composing)</h3><p>当多个视图（或者说 CALayer）重叠在一起显示时，GPU 会首先把他们混合到一起。如果视图结构过于复杂，混合的过程也会消耗很多 GPU 资源。为了减轻这种情况的 GPU 消耗，应用应当尽量减少视图数量和层次，并在不透明的视图里标明 opaque 属性以避免无用的 Alpha 通道合成。当然，这也可以用上面的方法，把多个视图预先渲染为一张图片来显示。</p><h3 id="图形的生成"><a href="#图形的生成" class="headerlink" title="图形的生成"></a>图形的生成</h3><p>CALayer 的 border、圆角、阴影、遮罩（mask），CASharpLayer 的矢量图形显示，通常会触发离屏渲染（offscreen rendering），而离屏渲染通常发生在 GPU 中。当一个列表视图中出现大量圆角的 CALayer，并且快速滑动时，可以观察到 GPU 资源已经占满，而 CPU 资源消耗很少。这时界面仍然能正常滑动，但平均帧数会降到很低。为了避免这种情况，可以尝试开启 CALayer.shouldRasterize 属性，但这会把原本离屏渲染的操作转嫁到 CPU 上去。对于只需要圆角的某些场合，也可以用一张已经绘制好的圆角图片覆盖到原本视图上面来模拟相同的视觉效果。最彻底的解决办法，就是把需要显示的图形在后台线程绘制为图片，避免使用圆角、阴影、遮罩等属性。</p><blockquote><p>参考:<br><a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="noopener">iOS 保持界面流畅的技巧</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS 保持界面流畅的技巧&lt;/a
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="UI" scheme="http://codingdoge.cn/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer —— 滑动窗口的最大值</title>
    <link href="http://codingdoge.cn/2017/07/25/title:%20%E5%89%91%E6%8C%87Offer%20%E2%80%94%E2%80%94%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://codingdoge.cn/2017/07/25/title: 剑指Offer —— 滑动窗口的最大值/</id>
    <published>2017-07-25T02:43:00.000Z</published>
    <updated>2018-01-14T16:38:57.866Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源:<strong><a href="https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&amp;tqId=11217&amp;tPage=4&amp;rp=4&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">滑动窗口的最大值</a></strong></p></blockquote><hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组<code>{2,3,4,2,6,2,5,1}</code>及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为<code>{4,4,6,6,6,5}</code>； 针对数组<code>{2,3,4,2,6,2,5,1}</code>的滑动窗口有以下6个： <code>{[2,3,4],2,6,2,5,1}</code>， <code>{2,[3,4,2],6,2,5,1}</code>， <code>{2,3,[4,2,6],2,5,1}</code>， <code>{2,3,4,[2,6,2],5,1}</code>， <code>{2,3,4,2,[6,2,5],1}</code>， <code>{2,3,4,2,6,[2,5,1]}</code>。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>用一个双端队列维护当前滑动窗口的状态，队首是当前窗口最大值的下标，当窗口滑动进入一个新值k时，k从队尾依次向前比较，比k小的全部出队，保障了k的权重应有的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">vector&lt;int&gt; maxInWindows(const vector&lt;int&gt; &amp;num, unsigned int size) &#123;</div><div class="line">truevector&lt;int&gt; ans;</div><div class="line">truedeque&lt;int&gt; q;</div><div class="line">trueif (num.size() &lt; size || size == 0) </div><div class="line">true   return ans;</div><div class="line">truefor (int i = 0; i &lt; size; i++) &#123;</div><div class="line">true   while(!q.empty() &amp;&amp; num[i] &gt; num[q.back()])</div><div class="line">true   q.pop_back();</div><div class="line">true   q.push_back(i);</div><div class="line">true&#125;</div><div class="line">truefor (int i = size; i &lt; num.size(); i++) &#123;</div><div class="line">true   ans.push_back(num[q.front()]);</div><div class="line">true   while (!q.empty() &amp;&amp; num[i] &gt;= num[q.back()])</div><div class="line">true       q.pop_back();</div><div class="line">true   while (!q.empty() &amp;&amp; q.front() &lt;= i-size)</div><div class="line">true       q.pop_front();</div><div class="line">true   q.push_back(i);</div><div class="line">true&#125;</div><div class="line">trueans.push_back(num[q.front()]);</div><div class="line">truereturn ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源:&lt;strong&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&amp;amp;tqId=11217&amp;amp;tPage=4&amp;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
      <category term="剑指Offer" scheme="http://codingdoge.cn/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>Remove Duplicates from Sorted Array</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20Remove%20Duplicates%20from%20Sorted%20Array%20%20/"/>
    <id>http://codingdoge.cn/2017/07/23/title: Remove Duplicates from Sorted Array  /</id>
    <published>2017-07-23T15:56:00.000Z</published>
    <updated>2018-01-14T16:41:30.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源LeetCode: <strong><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">LeetCode OJ</a></strong>  </p></blockquote><hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.<br>Do not allocate extra space for another array, you must do this in place with constant memory.<br>For example,<br>Given input array nums = [1,1,2],<br>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.  </p><h2 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h2><p>给出一个sorted array(意思是指已经排好序了?)，处理后数组里每一个元素只能出现一次，返回处理后的数组长度。<br>不能使用额外的数组空间，只能用已经给出的确定的内存空间。  </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>因为不太懂sorted array具体指的什么，第一次做的时候以为数组是随机的，相同元素出现的位置是随机的，然后题目也没给出limit time，随手就写了一个O(n^3)  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++)&#123;  </div><div class="line">true<span class="keyword">for</span>(int j = i+<span class="number">1</span>; j &lt; <span class="built_in">num</span>; j++)&#123;  </div><div class="line">truetrue<span class="keyword">if</span>(<span class="built_in">array</span>[i] == <span class="built_in">array</span>[j])&#123;  </div><div class="line"> <span class="keyword">for</span>(int k = j; k &lt; <span class="built_in">num</span>-<span class="number">1</span>; k++)  </div><div class="line"> <span class="built_in">array</span>[k] = <span class="built_in">array</span>[k+<span class="number">1</span>];  </div><div class="line"> <span class="built_in">num</span>--;  </div><div class="line"> j--;  </div><div class="line"> &#125;  </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>自然是T了。然后就把sorted array当做已经排好序的数组，那就容易多了，算法也都是O(1)，一看代码就明白，水题，直接上代码。  </p><h3 id="way1"><a href="#way1" class="headerlink" title="way1"></a>way1</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">   <span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;  </div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++) &#123;  </div><div class="line">      <span class="keyword">if</span> (nums[<span class="keyword">index</span>] != nums[i])  </div><div class="line">         nums[++<span class="keyword">index</span>] = nums[i];  </div><div class="line"> &#125;  </div><div class="line"><span class="keyword">return</span> <span class="keyword">index</span> + <span class="number">1</span>;</div></pre></td></tr></table></figure><h3 id="way2-STL"><a href="#way2-STL" class="headerlink" title="way2 STL"></a>way2 STL</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return distance(<span class="name">nums</span>.begin(), unique(<span class="name">nums</span>.begin(), nums.end()))<span class="comment">;</span></div></pre></td></tr></table></figure><ul><li><p>std::distance<br>template<class inputiterator=""><br>typename iterator_traits<inputiterator>::difference_type<br>  distance (InputIterator first, InputIterator last);<br>Return distance between iterators<br>Calculates the number of elements between first and last.<br><a href="http://www.cplusplus.com/reference/iterator/distance/" target="_blank" rel="noopener">c++ reference</a>  </inputiterator></class></p></li><li><p>std::unique<br>equality (1)<br>template <class forwarditerator=""><br>ForwardIterator unique (ForwardIterator first, ForwardIterator last);<br>predicate (2)<br>template <class forwarditerator,="" class="" binarypredicate=""><br>ForwardIterator unique (ForwardIterator first, ForwardIterator last,</class></class></p><pre><code>BinaryPredicate pred);  </code></pre><p>Remove consecutive duplicates in range<br>Removes all but the first element from every consecutive group of equivalent elements in the range [first,last).<br><a href="http://www.cplusplus.com/reference/algorithm/unique/?kw=unique" target="_blank" rel="noopener">c++ reference</a>  </p></li></ul><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="noopener">RemoveDuplicatesfromSortedArrayII</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源LeetCode: &lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="http://codingdoge.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法总结</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%20%20/"/>
    <id>http://codingdoge.cn/2017/07/23/title: 常见排序算法总结  /</id>
    <published>2017-07-23T15:56:00.000Z</published>
    <updated>2018-01-14T16:45:17.006Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法一般分为：</p><ol><li>内部排序(In-place sort)<br> 不占用额外内存或者占用常数内存，如：插入排序、选择排序、冒泡排序、堆排序、快速排序。</li><li>外部排序(Out-place sort)<br> 因为排序数据大，可用内存一次不能容纳所有排序记录，排序过程中需要访问外存，如：归并排序、计数排序、基数排序、桶排序。</li></ol><p>也分为：</p><ol><li>稳定的排序(stable sort)<br> 插入排序、冒泡排序、归并排序、计数排序、基数排序、桶排序。</li><li>不稳定的排序(unstable sort)<br> 选择排序、快速排序、堆排序。<blockquote><p>算法的稳定性：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；否则称为不稳定的。  </p><hr><p>不稳定算法的改进：只需要在每个输入元素加一个index，表示初始时的数组索引，当不稳定的算法排好序后，对于相同的元素对index排序即可。</p></blockquote></li></ol><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918530488431.gif?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最优复杂度：当输入数组就是排好序的时候，复杂度为O(n)，而快速排序在这种情况下会产生O(n^2)的复杂度。<br>最差复杂度：当输入数组为倒序时，复杂度为O(n^2)。</p><blockquote><p>插入排序比较适合用于“少量元素的数组”。插入排序比较适合用于“少量元素的数组”。</p></blockquote><h3 id="1-直接插入排序（Straight-Insertion-Sort）"><a href="#1-直接插入排序（Straight-Insertion-Sort）" class="headerlink" title="1.直接插入排序（Straight Insertion Sort）"></a>1.直接插入排序（Straight Insertion Sort）</h3><hr><p>工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。具体算法描述如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><p>直接插入排序示例：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918534447677.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><blockquote><p>如果排序时碰到相等的元素，比较后会把相等的元素放在后面，所以这两个相等的元素之间的前后顺序没有改变，排序是稳定的。</p></blockquote><p>算法的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>])   <span class="comment">//若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> j = i<span class="number">-1</span>;</div><div class="line">            <span class="keyword">int</span> temp = a[i];    <span class="comment">//存储待排序元素</span></div><div class="line">            a[i] = a[i<span class="number">-1</span>];      <span class="comment">//先后移一个元素</span></div><div class="line">            <span class="keyword">while</span>(x &lt; a[j] &amp;&amp; j &gt;= <span class="number">0</span>)     <span class="comment">//查找在有序表中的插入位置，并注意边界判断</span></div><div class="line">            &#123;</div><div class="line">                a[j+<span class="number">1</span>] = a[j];</div><div class="line">                j--;         <span class="comment">//元素后移</span></div><div class="line">            &#125;</div><div class="line">            a[j+<span class="number">1</span>] = temp;      <span class="comment">//插入到正确位置</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。直接插入排序算法的优化算法有：二分插入排序，2-路插入排序。</p></blockquote><h3 id="2-希尔排序（Shell’s-Sort）"><a href="#2-希尔排序（Shell’s-Sort）" class="headerlink" title="2.希尔排序（Shell’s Sort）"></a>2.希尔排序（Shell’s Sort）</h3><hr><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。它是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p>基本原理是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。算法具体描述如下：</p><ol><li>选择一个步长，其设计者Donald Shell最初建议步长选择为<strong>n/2</strong>并且对步长取半直到步长达到1；</li><li>以步长为间隔对序列进行排序；</li><li>重复步骤2直到步长为1。</li></ol><p>希尔排序的示例：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918802730993.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><blockquote><p>希尔排序是不稳定的。</p></blockquote><p>算法的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap=n&gt;&gt;<span class="number">1</span>; gap&gt;<span class="number">0</span>; gap&gt;&gt;=<span class="number">1</span>) <span class="comment">// 确定步长，直到步长为1</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=gap; i&lt;n; i++) <span class="comment">// 以步长为间隔进行排序</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp = a[i];</div><div class="line">            <span class="keyword">int</span> j;</div><div class="line">            <span class="keyword">for</span> (j=i-gap; j&gt;=<span class="number">0</span>&amp;&amp;a[j]&gt;temp; j-=gap)   <span class="comment">// 排序细节</span></div><div class="line">            a[j+gap] = a[j];</div><div class="line">            a[j+gap] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。已知的最好步长序列是由Sedgewick提出的(1, 5, 19, 41, 109,…)，该序列的项来自两个算式<a href="http://faculty.simpson.edu/lydia.sinapova/www/cmsc250/LN250_Weiss/L12-ShellSort.htm#increments" target="_blank" rel="noopener">[1]</a>。这项研究也表明“比较在希尔排序中是最主要的操作，而不是交换。”用这样步长序列的希尔排序比插入排序要快，甚至在小数组中比快速排序和堆排序还快，但是在涉及大量数据时希尔排序还是比快速排序慢。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918816323841.gif?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="简单选择排序（Simple-Selection-Sort）"><a href="#简单选择排序（Simple-Selection-Sort）" class="headerlink" title="简单选择排序（Simple Selection Sort）"></a>简单选择排序（Simple Selection Sort）</h3><hr><p>基本原理是在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。算法的具体描述如下：</p><ol><li>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；</li><li><p>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；</p></li><li><p>以此类推…..</p></li><li><p>第i趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，</p></li></ol><p>直到整个序列按关键码有序。</p><p>简单选择排序的示例：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918818530845.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>算法实现：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> SelectSort(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</div><div class="line">&#123;</div><div class="line">true<span class="keyword">int</span> <span class="built_in">min</span> = a[<span class="number">0</span>];</div><div class="line">true<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">true&#123;</div><div class="line">truetrue<span class="built_in">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++)<span class="comment">// 每次选出序列中最小的数</span></div><div class="line">truetruetrue<span class="built_in">if</span> (a[j] &lt; <span class="built_in">min</span>)</div><div class="line">truetruetruetrue<span class="built_in">min</span> = a[j];</div><div class="line">truetruea[i] = <span class="built_in">min</span>;<span class="comment">// 将每次选好的数放在正确的位置</span></div><div class="line">true&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>选择排序是稳定的。</p></blockquote><p>选择排序的交换操作介于<strong>0</strong>和<strong>(n-1)</strong>次之间。选择排序的比较操作为<strong>n(n-1)</strong>次之间。选择排序的赋值操作介于<strong>0</strong>和<strong>3(n-1)</strong>次之间。<br>比较次数<strong>O(n^2 )</strong>，比较次数与关键字的初始状态无关，总的比较次数<strong>N=(n-1)+(n-2)+…+1=n(n-1)/2</strong>。交换次数<strong>O(n)</strong>，最好情况是，已经有序，交换<strong>0</strong>次；最坏情况是，逆序，交换<strong>n-1</strong>次。交换次数比冒泡排序较少，由于交换所需CPU时间比比较所需的CPU时间多，<strong>n</strong>值较小时，选择排序比冒泡排序快。<br>原地操作几乎是选择排序的唯一优点，当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见。</p><h4 id="简单排序的改进——二元选择排序"><a href="#简单排序的改进——二元选择排序" class="headerlink" title="简单排序的改进——二元选择排序"></a>简单排序的改进——二元选择排序</h4><p>简单选择排序，每趟循环只能确定一个元素排序后的定位。我们可以考虑改进为每趟循环确定两个元素（当前趟最大和最小记录）的位置,从而减少排序所需的循环次数。改进后对n个数据进行排序，最多只需进行[n/2]趟循环即可。具体实现如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> SelectSort(<span class="keyword">int</span> r[],<span class="keyword">int</span> n) &#123;  </div><div class="line">    <span class="keyword">int</span> i ,j , <span class="built_in">min</span> ,<span class="built_in">max</span>, tmp;  </div><div class="line">    <span class="built_in">for</span> (i=<span class="number">1</span> ;i &lt;= n/<span class="number">2</span>;i++) &#123;    </div><div class="line">        <span class="comment">// 做不超过n/2趟选择排序   </span></div><div class="line">        <span class="built_in">min</span> = i; <span class="built_in">max</span> = i ; <span class="comment">//分别记录最大和最小关键字记录位置  </span></div><div class="line">        <span class="built_in">for</span> (j= i+<span class="number">1</span>; j&lt;= n-i; j++) &#123;  </div><div class="line">            <span class="built_in">if</span> (r[j] &gt; r[<span class="built_in">max</span>]) &#123;   </div><div class="line">                <span class="built_in">max</span> = j ; <span class="built_in">continue</span> ;   </div><div class="line">            &#125;    </div><div class="line">            <span class="built_in">if</span> (r[j]&lt; r[<span class="built_in">min</span>]) &#123;   </div><div class="line">                <span class="built_in">min</span> = j ;   </div><div class="line">            &#125;     </div><div class="line">      &#125;    </div><div class="line">      <span class="comment">//该交换操作还可分情况讨论以提高效率  </span></div><div class="line">      tmp = r[i<span class="number">-1</span>]; r[i<span class="number">-1</span>] = r[<span class="built_in">min</span>]; r[<span class="built_in">min</span>] = tmp;  </div><div class="line">      tmp = r[n-i]; r[n-i] = r[<span class="built_in">max</span>]; r[<span class="built_in">max</span>] = tmp;  </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h3><hr><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918826895959.gif?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>堆排序是指利用堆这种数据结构所设计的一种排序算法。其基本原理如下：<br>堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br>若以一维数组存储一个堆，则堆对应一棵完全二叉树，且所有非叶结点的值均不大于(或不小于)其子女的值，根结点（堆顶元素）的值是最小(或最大)的。如：</p><ol><li>大顶堆序列：（96, 83, 27, 38, 11, 09)</li><li>小顶堆序列：（12, 36, 24, 85, 47, 30, 53, 91）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918830727069.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  </li></ol><p>初始时把n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。<br>因此，实现堆排序需解决两个问题：</p><ol><li>如何将n 个待排序的数建成堆；</li><li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li></ol><p>首先讨论第二个问题：输出堆顶元素后，对剩余n-1元素重新建成堆的调整过程。调整小顶堆的方法：</p><ol><li>设有m 个元素的堆，输出堆顶元素后，剩下m-1 个元素。将堆底元素送入堆顶（（最后一个元素与堆顶进行交换），堆被破坏，其原因仅是根结点不满足堆的性质。</li><li>将根结点与左、右子树中较小元素的进行交换。</li><li>若与左子树交换：如果左子树堆被破坏，即左子树的根结点不满足堆的性质，则重复方法 2.</li><li>若与右子树交换，如果右子树堆被破坏，即右子树的根结点不满足堆的性质。则重复方法 2.</li><li>继续对不满足堆性质的子树进行上述交换操作，直到叶子结点，堆被建成。</li></ol><p>称这个自根结点到叶子结点的调整过程为筛选。如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918847712647.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>再讨论对n 个元素初始建堆的过程。<br>建堆方法：对初始序列建堆的过程，就是一个反复进行筛选的过程。</p><ol><li>n个结点的完全二叉树，则最后一个结点是第个结点的子树。</li><li>筛选从第个结点为根的子树开始，该子树成为堆。</li><li>之后向前依次对各结点为根的子树进行筛选，使之成为堆，直到根结点。</li></ol><p>如图建堆初始过程：无序序列：（49，38，65，97，76，13，27，49）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918848199034.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>算法的实现：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 已知H[s…m]除了H[s] 外均满足堆的定义 </div><div class="line"> * 调整H[s],使其成为大顶堆.即将对第s个结点为根的子树筛选,  </div><div class="line"> * </div><div class="line"> * @param H是待调整的堆数组 </div><div class="line"> * @param s是待调整的数组元素的位置 </div><div class="line"> * @param length是数组的长度 </div><div class="line"> * </div><div class="line"> */  </div><div class="line"><span class="type">void</span> HeapAdjust(<span class="type">int</span> H[],<span class="type">int</span> s, <span class="type">int</span> <span class="built_in">length</span>)  </div><div class="line">&#123;  </div><div class="line">    <span class="type">int</span> tmp  = H[s];  </div><div class="line">    <span class="type">int</span> child = <span class="number">2</span>*s+<span class="number">1</span>; <span class="comment">//左孩子结点的位置。(i+1 为当前调整结点的右孩子结点的位置)  </span></div><div class="line">    <span class="keyword">while</span> (child &lt; <span class="built_in">length</span>)</div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(child+<span class="number">1</span> &lt;<span class="built_in">length</span> &amp;&amp; H[child]&lt;H[child+<span class="number">1</span>])  <span class="comment">// 如果右孩子大于左孩子(找到比当前待调整结点大的孩子结点)  </span></div><div class="line">            ++child;  </div><div class="line">        <span class="keyword">if</span>(H[s]&lt;H[child])</div><div class="line">        &#123;  <span class="comment">// 如果较大的子结点大于父结点  </span></div><div class="line">            H[s] = H[child]; <span class="comment">// 那么把较大的子结点往上移动，替换它的父结点  </span></div><div class="line">            s = child;       <span class="comment">// 重新设置s ,即待调整的下一个结点的位置  </span></div><div class="line">            child = <span class="number">2</span>*s+<span class="number">1</span>;  </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>            <span class="comment">// 如果当前待调整结点大于它的左右孩子，则不需要调整，直接退出  </span></div><div class="line">             <span class="keyword">break</span>;   </div><div class="line">        H[s] = tmp;         <span class="comment">// 当前待调整的结点放到比其大的孩子结点位置上  </span></div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> * 初始堆进行调整 </div><div class="line"> * 将H[0..length-1]建成堆 </div><div class="line"> * 调整完之后第一个元素是序列的最小的元素 </div><div class="line"> */  </div><div class="line"><span class="type">void</span> BuildingHeap(<span class="type">int</span> H[], <span class="type">int</span> <span class="built_in">length</span>)  </div><div class="line">&#123;   </div><div class="line">    <span class="comment">//最后一个有孩子的节点的位置 i=  (length -1) / 2  </span></div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = (<span class="built_in">length</span> <span class="number">-1</span>) / <span class="number">2</span> ; i &gt;= <span class="number">0</span>; i--)  </div><div class="line">        HeapAdjust(H,i,<span class="built_in">length</span>);</div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * 堆排序算法 </div><div class="line"> */  </div><div class="line"><span class="type">void</span> HeapSort(<span class="type">int</span> H[],<span class="type">int</span> <span class="built_in">length</span>)  </div><div class="line">&#123;  </div><div class="line">    <span class="comment">//初始堆  </span></div><div class="line">    BuildingHeap(H, <span class="built_in">length</span>);  </div><div class="line">    <span class="comment">//从最后一个元素开始对序列进行调整  </span></div><div class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">//交换堆顶元素H[0]和堆中最后一个元素  </span></div><div class="line">        <span class="type">int</span> temp = H[i]; H[i] = H[<span class="number">0</span>]; H[<span class="number">0</span>] = temp;  </div><div class="line">        <span class="comment">//每次交换堆顶元素和堆中最后一个元素之后，都要对堆进行调整  </span></div><div class="line">        HeapAdjust(H,<span class="number">0</span>,i);  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>堆排序是不稳定的。</p></blockquote><p>设树深度为k，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918856456281.jpg?imageView2/0/q/100)。从根到叶的筛选，元素比较次数至多2(k-1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>次，交换记录至多k 次。所以，在建好堆后，排序过程中的筛选次数不超过下式：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918856037036.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>而建堆时的比较次数不超过4n 次，因此堆排序最坏情况下，时间复杂度也为：O(nlogn )。</p><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><hr><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918857702506.gif?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>冒泡排序重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。<br>冒泡排序示例：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918858207359.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>算法的实现：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void <span class="keyword">bubbleSort(int </span>a[], int n)</div><div class="line">&#123;  </div><div class="line">    for(int i =<span class="number">0</span> <span class="comment">; i&lt; n-1; ++i)</span></div><div class="line">        for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; n-i-1; ++j) </span></div><div class="line">            if(a[<span class="keyword">j] </span>&gt; a[<span class="keyword">j+1]) </span> </div><div class="line">            &#123;  </div><div class="line">                int tmp = a[<span class="keyword">j];</span></div><div class="line">                a[<span class="keyword">j] </span>= a[<span class="keyword">j+1];</span></div><div class="line">                a[<span class="keyword">j+1] </span>= tmp<span class="comment">;  </span></div><div class="line">            &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>冒泡排序是稳定的。</p></blockquote><h4 id="冒泡算法的改进"><a href="#冒泡算法的改进" class="headerlink" title="冒泡算法的改进"></a>冒泡算法的改进</h4><p>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：</p><ol><li>设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。<br>改进后算法如下：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubble_1</span> <span class="params">( <span class="keyword">int</span> r[], <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i = n <span class="number">-1</span>;  <span class="comment">//初始时,最后位置保持不变  </span></div><div class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>)</div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">int</span> pos= <span class="number">0</span>; <span class="comment">//每趟开始时,无记录交换  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)  </div><div class="line">            <span class="keyword">if</span> (r[j] &gt; r[j+<span class="number">1</span>])</div><div class="line">            &#123;  </div><div class="line">                pos = j; <span class="comment">//记录交换的位置   </span></div><div class="line">                <span class="keyword">int</span> tmp = r[j];</div><div class="line">                r[j] = r[j+<span class="number">1</span>];</div><div class="line">                r[j+<span class="number">1</span>] = tmp;  </div><div class="line">            &#125;   </div><div class="line">        i = pos; <span class="comment">//为下一趟排序作准备  </span></div><div class="line">     &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。<br>改进后的算法为：</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">void <span class="keyword">Bubble_2 </span>(int r[], int n)</div><div class="line">&#123;  </div><div class="line">    int low = <span class="number">0</span><span class="comment">;   </span></div><div class="line">    int high = n-1<span class="comment">; //设置变量的初始值  </span></div><div class="line">    int tmp, <span class="keyword">j; </span> </div><div class="line">    while (low &lt; high)</div><div class="line">    &#123;  </div><div class="line">        for (<span class="keyword">j </span>= low<span class="comment">; j &lt; high; ++j) //正向冒泡,找到最大者  </span></div><div class="line">            if (r[<span class="keyword">j] </span>&gt; r[<span class="keyword">j+1])</span></div><div class="line">            &#123;  </div><div class="line">                tmp = r[<span class="keyword">j];</span></div><div class="line">                r[<span class="keyword">j]=r[j+1];</span></div><div class="line">                r[<span class="keyword">j+1]=tmp; </span> </div><div class="line">            &#125;   </div><div class="line">        --high<span class="comment">;                 //修改high值, 前移一位  </span></div><div class="line">        for (<span class="keyword">j </span>= high<span class="comment">; j &gt; low; --j) //反向冒泡,找到最小者  </span></div><div class="line">            if (r[<span class="keyword">j] </span>&lt; r[<span class="keyword">j-1])</span></div><div class="line">            &#123;  </div><div class="line">                tmp = r[<span class="keyword">j];</span></div><div class="line">                r[<span class="keyword">j]=r[j-1];</span></div><div class="line">                r[<span class="keyword">j-1]=tmp; </span> </div><div class="line">            &#125;  </div><div class="line">        ++low<span class="comment">;                  //修改low值,后移一位  </span></div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h3><hr><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918867109600.gif?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>快速排序又称划分交换排序（partition-exchange sort），使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。其算法描述为：</p><ol><li>从数列中挑出一个元素，称为”基准”（pivot）。</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>快速排序的示例：</p><ol><li><p>一趟排序的过程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918869209728.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>排序的全过程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918869418896.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>算法的实现（递归）：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">void quickSort_recursive(int a[], int low, int high)</div><div class="line">&#123;</div><div class="line">    int <span class="built_in">first</span> = low;</div><div class="line">    int <span class="built_in">last</span> = high;</div><div class="line">    int <span class="built_in">key</span> = a[<span class="built_in">first</span>];</div><div class="line">    <span class="keyword">if</span>(low &gt;= high)</div><div class="line">        <span class="built_in">return</span> ;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">first</span> &lt; <span class="built_in">last</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>((<span class="built_in">first</span> &lt; <span class="built_in">last</span>)&amp;&amp;(<span class="built_in">key</span> &lt;= a[<span class="built_in">last</span>]))</div><div class="line">            <span class="built_in">last</span>--;</div><div class="line">        a[<span class="built_in">first</span>] = a[<span class="built_in">last</span>];</div><div class="line">        <span class="keyword">while</span>((<span class="built_in">first</span> &lt; <span class="built_in">last</span>)&amp;&amp;(<span class="built_in">key</span> &gt;= a[<span class="built_in">first</span>]))</div><div class="line">            <span class="built_in">first</span>++;</div><div class="line">        a[<span class="built_in">last</span>] = a[<span class="built_in">first</span>];</div><div class="line">    &#125;</div><div class="line">    a[<span class="built_in">first</span>] = <span class="built_in">key</span>;</div><div class="line">    quickSort_recursive(a, low, <span class="built_in">first</span>-<span class="number">1</span>);</div><div class="line">    quickSort_recursive(a, <span class="built_in">first</span>+<span class="number">1</span>, high);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>快速排序是不稳定的。<br>快排迭代算法:维护一个栈，存放划分的起点终点</p></blockquote><p>在平均状况下，排序n个项目要Ο(nlogn)次比较。在最坏状况下（正序或逆序）则需要Ο(n^2 )次比较，取决于其递归树的高度。事实上，快速排序通常明显比其他Ο(nlogn)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。快速排序是一个不稳定的排序方法。</p><h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><hr><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918886605315.gif?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><ol><li>将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素</li><li>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素</li><li>重复步骤2，直到所有元素排序完毕</li></ol><p>算法实现：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> merge_sort_recursive(<span class="keyword">int</span> arr[], <span class="keyword">int</span> <span class="keyword">reg</span>[], <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="keyword">end</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (start &gt;= <span class="keyword">end</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="keyword">end</span> - start, mid = (len &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">    <span class="keyword">int</span> start1 = start, end1 = mid;</div><div class="line">    <span class="keyword">int</span> start2 = mid + <span class="number">1</span>, end2 = <span class="keyword">end</span>;</div><div class="line">    merge_sort_recursive(arr, <span class="keyword">reg</span>, start1, end1);</div><div class="line">    merge_sort_recursive(arr, <span class="keyword">reg</span>, start2, end2);</div><div class="line">    <span class="keyword">int</span> k = start;</div><div class="line">    <span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</div><div class="line">        <span class="keyword">reg</span>[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</div><div class="line">    <span class="keyword">while</span> (start1 &lt;= end1)</div><div class="line">        <span class="keyword">reg</span>[k++] = arr[start1++];</div><div class="line">    <span class="keyword">while</span> (start2 &lt;= end2)</div><div class="line">        <span class="keyword">reg</span>[k++] = arr[start2++];</div><div class="line">    <span class="keyword">for</span> (k = start; k &lt;= <span class="keyword">end</span>; k++)</div><div class="line">        arr[k] = <span class="keyword">reg</span>[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> merge_sort(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</div><div class="line">&#123;</div><div class="line">true<span class="keyword">int</span> <span class="keyword">reg</span>[len];</div><div class="line">truemerge_sort_recursive(arr, <span class="keyword">reg</span>, <span class="number">0</span>, len - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="两路归并的递归算法"><a href="#两路归并的递归算法" class="headerlink" title="两路归并的递归算法"></a>两路归并的递归算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSort</span><span class="params">(ElemType *r, ElemType *rf,<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span>  </span></div><div class="line">&#123;   </div><div class="line">    ElemType *rf2;  </div><div class="line">    <span class="keyword">if</span>(s==t) r[s] = rf[s];  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">int</span> m=(s+t)/<span class="number">2</span>;          <span class="comment">/*平分*p 表*/</span>  </div><div class="line">        MSort(r, rf2, s, m);        <span class="comment">/*递归地将p[s…m]归并为有序的p2[s…m]*/</span>  </div><div class="line">        MSort(r, rf2, m+<span class="number">1</span>, t);      <span class="comment">/*递归地将p[m+1…t]归并为有序的p2[m+1…t]*/</span>  </div><div class="line">        Merge(rf2, rf, s, m+<span class="number">1</span>,t);   <span class="comment">/*将p2[s…m]和p2[m+1…t]归并到p1[s…t]*/</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort_recursive</span><span class="params">(ElemType *r, ElemType *rf, <span class="keyword">int</span> n)</span>  </span></div><div class="line">&#123;   <span class="comment">/*对顺序表*p 作归并排序*/</span>  </div><div class="line">    MSort(r, rf,<span class="number">0</span>, n<span class="number">-1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤3直到某一指针到达序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾；</li></ol><p>算法实现：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">void merge_sort_iteration(<span class="built_in">int</span> arr[], <span class="built_in">int</span> <span class="built_in">len</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span>* a = arr;</div><div class="line">    <span class="built_in">int</span>* b = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">len</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> seg = <span class="number">1</span>; seg &lt; <span class="built_in">len</span>; seg += seg)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> start = <span class="number">0</span>; start &lt; <span class="built_in">len</span>; start += seg + seg)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">int</span> low = start, <span class="built_in">mid</span> = min(start + seg, <span class="built_in">len</span>), high = min(start + seg + seg, <span class="built_in">len</span>);</div><div class="line">            <span class="built_in">int</span> k = low;</div><div class="line">            <span class="built_in">int</span> start1 = low, end1 = <span class="built_in">mid</span>;</div><div class="line">            <span class="built_in">int</span> start2 = <span class="built_in">mid</span>, end2 = high;</div><div class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</div><div class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</div><div class="line">            <span class="keyword">while</span> (start1 &lt; end1)</div><div class="line">                b[k++] = a[start1++];</div><div class="line">            <span class="keyword">while</span> (start2 &lt; end2)</div><div class="line">                b[k++] = a[start2++];</div><div class="line">        &#125;</div><div class="line">        T* temp = a;</div><div class="line">        a = b;</div><div class="line">        b = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a != arr)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++)</div><div class="line">            b[i] = a[i];</div><div class="line">        b = a;</div><div class="line">    &#125;</div><div class="line">    delete[] b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>归并排序是稳定的。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="各种排序的稳定性，时间复杂度和空间复杂度总结："><a href="#各种排序的稳定性，时间复杂度和空间复杂度总结：" class="headerlink" title="各种排序的稳定性，时间复杂度和空间复杂度总结："></a>各种排序的稳定性，时间复杂度和空间复杂度总结：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/14918924354057.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>参考资料有：<br>真实的归宿——<a href="http://blog.csdn.net/hguisu/article/details/7776068" target="_blank" rel="noopener">八大排序算法</a><br>xiazdong——<a href="http://blog.csdn.net/xiazdong/article/details/8462393" target="_blank" rel="noopener">九大排序算法再总结</a><br><a href="https://zh.wikipedia.org/wiki/Wikipedia:首页" target="_blank" rel="noopener">wikipedia</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;排序算法一般分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内部排序(In-place sort)&lt;br&gt; 不占用额外内存或者占用常数内存，如：插入排序、选择排序、冒泡排序、堆排序、快速排序。&lt;/li&gt;
&lt;li&gt;外部排序(Out-place sort)&lt;br&gt; 因为排序数据大，可用内存一
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Search in Rotated Sorted Array</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20Search%20in%20Rotated%20Sorted%20Array%20%20/"/>
    <id>http://codingdoge.cn/2017/07/23/title: Search in Rotated Sorted Array  /</id>
    <published>2017-07-23T15:56:00.000Z</published>
    <updated>2018-01-12T14:25:37.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源LeetCode: <strong><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">LeetCode OJ</a></strong>  </p></blockquote><hr><blockquote><p>题目描述: Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).<br>You are given a target value to search. If found in the array return its index, otherwise return -1.<br>You may assume no duplicate exists in the array.  </p></blockquote><h2 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h2><p>一个排好序的数组，不知道以哪个点为中心旋转了(部分有序)，你的任务是查找给定的数是否存在数组中。在的话返回下标，不在的话返回－1. </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查找首先想到O(log(n))的二分查找，但是二分查找的前提是有序数组。题目里一个有序数组旋转后变成了部分有序。通过比较两端大小找到增序部分。  </p><blockquote><p>eg: 4 5 6 0 1 2 3<br>first = 4, mid = 0, last = 3，<br>通过比较first,mid,last找到增序部分。<br>在这个例子中为1 2 3，<br>然后判断target是否在这个增序子序列中，<br>如果在则直接用二分查找，<br>不在则在另一部分(例子中为4 5 6 0)中继续分解。</p></blockquote><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre><code class="//">int search(const vector&lt;int&gt;&amp; nums, int target){    int first = 0;    int last = nums.size();    while(first != last)    {        const int mid = (first+last)&gt;&gt;1;    // 使用位运算加速        if(nums[mid] == target)            return mid;        if(nums[first] &lt;= nums[mid])    // 找到增序子序列            if(nums[first]&lt;=target &amp;&amp; target&lt;nums[mid])    // 找到target在哪个部分                last = mid;            else                first = mid+1;        else            if(nums[mid]&lt;target &amp;&amp; target&lt;=nums[last-1])                first = mid+1;            else                last = mid;    }    return -1;}</code></pre><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>当数组为无序时的二分查找  </p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>一种是先排序再二分，一种是结合快排思想，每次选择一个关键字，比他大的放右边，比他小的放左边，然后再比较他和需要查找的数的关系，再选择区间进行迭代。如果需要返回查找数的下标，则添加一个纪录下标的数组，这样排好序后也能知道当前数在原始数组中的位置。  </p><blockquote><p>初始数组3 1 2 5 4 7 0 6<br>mid = key = 3 进行一次快排填坑<br>得到数组0 1 2 3 4 7 5 6<br>比较mid与target<br>如果target&gt;mid则迭代mid后半部分<br>如果target&lt;mid则迭代mid前半部分<br>直到找到target  </p></blockquote><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><pre><code class="//">int BinarySearch(vector&lt;int&gt;&amp; nums, int target){    int num = nums.size();    int index[num];        // index数组纪录下标 以便能找到在数组的初始位置    for(int i = 0; i &lt; num; i++)    // 初始化index数组        index[i] = i;    int l, r, m, sl, sr, mIndex;    l = 0, r = num-1;    while(l&lt;=r)        // 开始迭代    {        mIndex = index[l], m = nums[l];        sl = l, sr = r;        while(sl&lt;sr)    // 快排思想，左右填坑，并用index记录位置        {            while(sl&lt;sr &amp;&amp; m&lt;nums[sr])                sr--;            nums[sl] = nums[sr];            index[sl] = index[sr];            while(sl&lt;sr &amp;&amp; m&gt;nums[sl])                sl++;            nums[sr] = nums[sl];            index[sr] = index[sl];        }        nums[sl] = m;        index[sl] = mIndex;        if(m == target)            return mIndex;        if(target &gt; m)        // 判断target在哪个区间            l = sl+1;        else            r = sl-1;    }    return -1;}</code></pre><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/" target="_blank" rel="noopener">Search in Rotated Sorted Array II</a>  </p><h2 id="相关题目分析"><a href="#相关题目分析" class="headerlink" title="相关题目分析"></a>相关题目分析</h2><p>因为允许出现重复数字，但是数组还是部分有序的，所以跳过重复数字即可  </p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><pre><code class="//">int search(const vector&lt;int&gt;&amp; nums, int target){    int first = 0;    int last = nums.size();    while(first != last)    {            const int mid = (first+last)&gt;&gt;1;        if(nums[mid] == target)            return mid;        if(nums[first] &lt; nums[mid])            if(nums[first]&lt;=target &amp;&amp; target&lt;nums[mid])                last = mid;            else                first = mid+1;        else if(nums[first] &gt; nums[mid])        {            if(nums[mid]&lt;target &amp;&amp; target&lt;=nums[last-1])                first = mid+1;            else                last = mid;        }        else    // 特判相等时跳过            first++;    }    return -1;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源LeetCode: &lt;strong&gt;&lt;a href=&quot;https://leetcode.com/problems/search-in-rotated-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="http://codingdoge.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods 安装及一般使用</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20CocoaPods%20%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://codingdoge.cn/2017/07/23/title: CocoaPods 安装及一般使用/</id>
    <published>2017-07-23T15:47:00.000Z</published>
    <updated>2018-01-13T05:06:34.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WHAT-IS-COCOAPODS"><a href="#WHAT-IS-COCOAPODS" class="headerlink" title="WHAT IS COCOAPODS"></a>WHAT IS <a href="https://cocoapods.org" target="_blank" rel="noopener">COCOAPODS</a></h2><p>CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects.CocoaPods can help you scale your projects elegantly.</p><h2 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h2><p>CocoaPods是基于ruby建立的，要确保你的电脑里装有Ruby，不过Mac都是自带Ruby的，你可以用<a href="https://rvm.io" target="_blank" rel="noopener">rvm</a>来管理你的ruby.</p><blockquote><p> <a href="https://ruby-china.org/wiki/rvm-guide" target="_blank" rel="noopener">RVM 实用指南 · Ruby China</a><br>然后我们使用Rubygem来安装cocoapods.<br>由于GFW的原因我们不能访问cocoapods.org，使用淘宝的Ruby镜像来代替：</p><ol><li>删除自带的Ruby镜像<br><code>$ gem sources --remove https://rubygems.org/</code></li><li>添加淘宝的镜像<br><code>$ gem sources -a https://gems.ruby-china.org/</code><br>（如果这个镜像不能用，就用<a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a><br>）</li><li>可以用<code>$ gem sources -l</code>来检验。成功即显示以下结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/FF76DDA8-EC18-438C-B921-8603D4688C1D.png?imageView2/0/q/100" alt="FF76DDA8-EC18-438C-B921-8603D4688C1D" title="">                </div>                <div class="image-caption">FF76DDA8-EC18-438C-B921-8603D4688C1D</div>            </figure></li></ol></blockquote><ol><li>安装CocoaPods<br><code>$ sudo gem install cocoapods</code></li><li>配置CocoaPods<br><code>$ pod setup</code></li></ol><p>如果安装失败的话，根据报错去解决问题，比如gem没更新，ruby版本等。<br>常见问题：<br><figure class="highlight plain"><figcaption><span>While executing gem ... (Errno::EPERM)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Operation not permitted - /usr/bin/xcodeproj</div></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/q/1010000002926243" target="_blank" rel="noopener">安装Cocoapods， 更新gem出现的问题。 - SegmentFault</a><br><a href="http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030" target="_blank" rel="noopener">ios - Cannot install cocoa pods after uninstalling, results in error - Stack Overflow</a></p><h2 id="Using-CocoaPods"><a href="#Using-CocoaPods" class="headerlink" title="Using CocoaPods"></a>Using CocoaPods</h2><ol><li>使用之前你要确保你所想用的库存在CocoaPods中：(拿AFNetworking举例)<br><code>$ pod search AFNetworking</code><br>第一次搜索会需要建立索引，比较慢一些。</li><li><p>搜索完成后会列举出结果和版本：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/37122577-4CDC-48C9-9B25-4B943D983810.png?imageView2/0/q/100" alt="37122577-4CDC-48C9-9B25-4B943D983810" title="">                </div>                <div class="image-caption">37122577-4CDC-48C9-9B25-4B943D983810</div>            </figure></li><li><p>然后通过创建<a href="https://guides.cocoapods.org/using/the-podfile.html" target="_blank" rel="noopener">Podfile</a>文件来添加依赖关系</p></li><li>先<code>cd</code>进你项目所在的目录(简介里面可以直接复制路径) </li><li>利用vim创建Podfile文件<br><code>$ vim Podfile</code></li><li>然后输入：<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">platform</span> :ios, <span class="string">'10.0'</span></div><div class="line"></div><div class="line">target <span class="string">'TargetName'</span> <span class="keyword">do</span></div><div class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.0'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li></ol><blockquote><p>文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 10.0，’TargetName’为你项目的名称，要下载的AFNetworking版本是3.0<br>保存退出。</p><ol><li>运行<code>$ pod install</code><br>完成后会出现<br>提示使用’XXX.xcworkspace’文件来代替之前的’XXX.xcodeproj’文件打开项目。<br>打开项目后会发现<br>里面有了我们想要加进来的库，可以<code>#import</code>进来了。</li></ol></blockquote><ol><li>增加新的库<br>如果使用过程中我还想添加其他的库怎么办，只要在Podfile里面接着添加，然后终端再执行<code>pod install</code>就可以了。</li><li>更新CocoaPods中的库<br>第三方库们都有人在维护升级，我们需要隔断时间就要更新下我们工程中第三方库的版本。只需要终端输入命令<code>pod update</code>就可以了。</li><li>删除CocoaPods中的某些库<br>当我们需要去掉某个第三方库时，只需要在Podfile删除该引入该库的语句，然后执行<code>pod update</code>或者<code>pod install</code>就可以了。</li><li>升级CocoaPods<br><code>sudo gem install cocoapods</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WHAT-IS-COCOAPODS&quot;&gt;&lt;a href=&quot;#WHAT-IS-COCOAPODS&quot; class=&quot;headerlink&quot; title=&quot;WHAT IS COCOAPODS&quot;&gt;&lt;/a&gt;WHAT IS &lt;a href=&quot;https://cocoapods.
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Tool" scheme="http://codingdoge.cn/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>self与super的区别</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20self%E4%B8%8Esuper%E7%9A%84%E5%8C%BA%E5%88%AB%20/"/>
    <id>http://codingdoge.cn/2017/07/23/title: self与super的区别 /</id>
    <published>2017-07-23T15:47:00.000Z</published>
    <updated>2018-01-14T16:47:12.060Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文<a href="http://blog.csdn.net/evilotus/article/details/7284290" target="_blank" rel="noopener"><strong>CSDN evilotus</strong></a><br>有所整理  </p><hr><p>在<strong>ObjC</strong>中的类实现中经常看到这两个关键字”<strong>self</strong>”和”<strong>super</strong>”，以以前<strong>oop</strong>语言的经验，拿<strong>c++</strong>为例，<strong>self</strong>相当于<strong>this</strong>，<strong>super</strong>相当于调用父类的方法，这么看起来是很容易理解的。但是它们真正是如何调用的呢? 你知道吗?  </p></blockquote><ul><li>以下面的代码为例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@interface Person:NSObject</div><div class="line">&#123;</div><div class="line">trueNSString*  name;</div><div class="line">&#125;</div><div class="line">    (void) setName:(NSString) yourName;</div><div class="line">@end//Person  </div><div class="line">@interface PersonMe:Person</div><div class="line">&#123;</div><div class="line">trueNSUInteger age;</div><div class="line">&#125;</div><div class="line">    (void) setAge:(NSUInteger) age;</div><div class="line">    (void) setName:(NSString*) yourName andAge:(NSUInteger) age;</div><div class="line">@end// PersonMe  </div><div class="line">@implementation PersonMe</div><div class="line">(void) setName:(NSString*) yourName andAge:(NSUInteger) age</div><div class="line">&#123;</div><div class="line">true[self setAge:age];</div><div class="line">true[super setName:yourName];</div><div class="line">&#125;</div><div class="line">@end// PersonMe  </div><div class="line">int main(int argc, char* argv[]) &#123;</div><div class="line">NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init]</div><div class="line">PersonMe* me = [[PersonMe alloc] init];</div><div class="line">[me setName: @&quot;asdf&quot; andAge: 18];</div><div class="line">[me release];</div><div class="line">[pool drain];</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面有简单的两个类，在子类<strong>PersonMe</strong>中调用了自己类中的<strong>setAge</strong>和父类中的<strong>setName</strong>，这些代码看起来很好理解，没什么问题。 然后我在<strong>setName:andAge</strong>的方法中加入两行:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;self &apos; class is %@&quot;, [self class]);</div><div class="line">NSLog(@&quot;super&apos; class is %@&quot;, [super class]);</div><div class="line">```  </div><div class="line"></div><div class="line">这样在调用时，会打出来这两个的**class**，先猜下吧，会打印出什么？ 按照以前*oop*语言的经验，这里应该会输出:***self &apos; s class is PersonMe super &apos; s class is Person***</div><div class="line"></div><div class="line">但是编译运行后，可以发现结果是：</div><div class="line"></div><div class="line">``` // </div><div class="line">self &apos;s class is PersonMe</div><div class="line">super &apos; s class is PersonMe</div></pre></td></tr></table></figure><p><strong>self</strong>的<strong>class</strong>和预想的一样，怎么<strong>super</strong>的<strong>class</strong>也是<strong>PersonMe</strong>?  </p><h3 id="真相"><a href="#真相" class="headerlink" title="真相"></a>真相</h3><p><strong>self</strong>是类的隐藏的参数，指向当前当前调用方法的类，另一个隐藏参数是<strong>_cmd</strong>，代表当前类方法的<strong>selector</strong>。这里只关注这个<strong>self</strong>。<strong>super</strong>是个啥？<strong>super</strong>并不是隐藏的参数，它只是一个<strong>“编译器指示符”</strong>，它和<strong>self</strong>指向的是相同的消息接收者，拿上面的代码为例，不论是用<strong>[self setName]</strong>还是<strong>[super setName]</strong>，接收<strong>“setName”</strong>这个消息的接收者都是<strong>PersonMe* me</strong>这个对象。不同的是，<strong>super</strong>告诉编译器，当调用<strong>setName</strong>的方法时，要去调用父类的方法，而不是本类里的。</p><p>当使用<strong>self</strong>调用方法时，会从<strong>当前类</strong>的方法列表中开始找，如果没有，就从<strong>父类</strong>中再找；而当使用<strong>superv时，则从</strong>父类**的方法列表中开始找。然后调用父类的这个方法。</p><h3 id="One-more-step"><a href="#One-more-step" class="headerlink" title="One more step"></a>One more step</h3><p>这种机制到底底层是如何实现的？其实当调用类方法的时候，编译器会将方法调用转成一个C函数方法调用，apple的objcRuntimeRef上说：</p><blockquote><p>Sending Messages<br>When it encounters a method invocation, the compiler might generate a call to any of several functions to perform the actual message dispatch, depending on the receiver, the return value, and the arguments. You can use these functions to dynamically invoke methods from your own plain C code, or to use argument forms not permitted by NSObject’s perform… methods. These functions are declared in <code>/usr/include/objc/objc-runtime.h</code>.  </p><ul><li>objc_msgSend sends a message with a simple return value to an instance of a class.  </li><li>objc_msgSend_stret sends a message with a data-structure return value to an instance of<br>a class.  </li><li>objc_msgSendSuper sends a message with a simple return value to the superclass of an instance of a class.  </li><li>objc_msgSendSuper_stret sends a message with a data-structure return value to the superclass of an instance of a class.  </li></ul></blockquote><p>可以看到会转成调用上面4个方法中的一个，由于<code>_stret</code>系列的和没有<code>_stret</code>的那两个类似，先只关注<code>objc_msgSend</code>和<code>objc_msgSendSuper</code>两个方法。</p><p>当使用<code>[self setName]</code>调用时，会使用<code>objc_msgSend</code>的函数，先看下<code>objc_msgSend</code>的函数定义:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSend(id theReceiver, SEL theSelector, ...)</div></pre></td></tr></table></figure><p>第一个参数是消息接收者，第二个参数是调用的具体类方法的<code>selector</code>，后面是<code>selector</code>方法的可变参数。我们先不管这个可变参数，以<code>[self setName:]</code>为例，编译器会替换成调用<code>objc_msgSend</code>的函数调用，其中theReceiver是<code>self</code>，theSelector是 <code>@selector(setName:)</code>，这个selector是从当前<code>self</code>的class的方法列表开始找的setName，当找到后把对应的 selector传递过去。</p><p>而当使用<code>[super setName]</code>调用时，会使用<code>objc_msgSendSuper</code>函数，看下<code>objc_msgSendSuper</code>的函数定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSendSuper(struct objc_super *super, SEL op, ...)</div></pre></td></tr></table></figure><p>第一个参数是个<code>objc_super</code>的结构体，第二个参数还是类似上面的类方法的<code>selector</code>，先看下<code>objc_super</code>这个结构体是什么东西：  </p><pre><code class="//">struct objc_super  {      id receiver;      Class superClass;  };</code></pre><p>可以看到这个结构体包含了两个成员，一个是receiver，这个类似上面<code>objc_msgSend</code>的第一个参数receiver，第二个成员是记 录写<code>super</code>这个类的父类是什么，拿上面的代码为例，当编译器遇到<code>PersonMe</code>里<code>setName:andAge</code>方法里的<code>[super setName:]</code>时，开始做这几个事:  </p><ol><li><p>构建<code>objc_super</code>的结构体，此时这个结构体的第一个成员变量receiver就是<code>PersonMe* me</code>，和<code>self</code>相同。而第二个成员变量<code>superClass</code>就是指类<code>Person</code>，因为<code>PersonMe</code>的超类就是这个<code>Person</code>。</p></li><li><p>调用<code>objc_msgSendSuper</code>的方法，将这个结构体和setName的sel传递过去。函数里面在做的事情类似这样：从<code>objc_super</code>结构体指向的<code>superClass</code>的方法列表开始找setName的selector，找到后再以 objc_super-&gt;receiver去调用这个selector，可能也会使用objc_msgSend这个函数，不过此时的第一个参数 theReceiver就是objc_super-&gt;receiver，第二个参数是从objc_super-&gt;superClass中找到 的selector</p></li></ol><p>里面的调用机制大体就是这样了，以上面的分析，回过头来看开始的代码，当输出[self class]和[super class]时，是个怎样的过程。</p><p>当使用[self class]时，这时的self是PersonMe，在使用objc_msgSend时，第一个参数是receiver也就是self，也是 PersonMe* me这个实例。第二个参数，要先找到class这个方法的selector，先从PersonMe这个类开始找，没有，然后到PersonMe的父类 Person中去找，也没有，再去Person的父类NSObject去找，一层一层向上找之后，在NSObject的类中发现这个class方法，而 NSObject的这个class方法，就是返回receiver的类别，所以这里输出PersonMe。</p><p>当使用[super class]时，这时要转换成objc_msgSendSuper的方法。先构造objc_super的结构体吧，第一个成员变量就是self, 第二个成员变量是Person，然后要找class这个selector，先去superClass也就是Person中去找，没有，然后去Person 的父类中去找，结果还是在NSObject中找到了。然后内部使用函数objc_msgSend(objc_super-&gt;receiver, @selector(class)) 去调用，此时已经和我们用[self class]调用时相同了，此时的receiver还是PersonMe* me，所以这里返回的也是PersonMe。</p><p>Furthor more 在类的方法列表寻找一个方法时，还牵涉到一个概念类对象的isa指针和objc的meta-class概念，这里就不再详细介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文&lt;a href=&quot;http://blog.csdn.net/evilotus/article/details/7284290&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;CSDN evilotus&lt;/stro
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="OC" scheme="http://codingdoge.cn/tags/OC/"/>
    
      <category term="转载" scheme="http://codingdoge.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>视频开发</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/"/>
    <id>http://codingdoge.cn/2017/07/23/title: 视频开发/</id>
    <published>2017-07-23T15:47:00.000Z</published>
    <updated>2018-01-13T05:06:57.320Z</updated>
    
    <content type="html"><![CDATA[<p>下面會介紹視頻的一些基本知識，和在iOS上實現視頻播放和緩存的幾種方案。</p><blockquote><ul><li><strong>软解码和硬解码</strong><br>GPU解码就是所谓的硬解码，CPU解码就是软解码。iOS提供的播放器类使用的是硬解码，所以视频播放对CPU不会有很大的压力，但是支持的播放格式比较单一，一般就是MP4、MOV、M4V这几个。</li><li><strong>HTTP Live Streaming</strong><br>HTTP Live Streaming（缩写是 HLS）是一个由苹果公司提出的基于HTTP的流媒体网络传输协议。它的工作原理是把整个流分成一个个小的基于HTTP的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。支持的视频流编码为H.264。我们在视频网站上看到的M3U8后缀的播放链接就是使用HLS协议的视频。HLS优点，1、看完一段缓存一段，防止只看一段视频但是把整个视频文件都缓存下来的用户，减少服务器压力和节省流量。2、根据用户网速切换不同的码率，兼顾流程性和清晰度。</li></ul></blockquote><h1 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h1><p>实现视频播放的两个方案。</p><hr><h2 id="一、自己实现对数据编码解码"><a href="#一、自己实现对数据编码解码" class="headerlink" title="一、自己实现对数据编码解码"></a>一、自己实现对数据编码解码</h2><p>可以在一些开源播放器上进行二次开发，如Bilibili的<a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a>，或者直接对<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">FFmpeg</a>开发，优点在整个播放过程可控，为后续进行缓存、流量控制、码率切换等开发提供了基础，缺点是复杂，要求高，工程量大。</p><hr><h2 id="二、AVFoundation"><a href="#二、AVFoundation" class="headerlink" title="二、AVFoundation"></a>二、AVFoundation</h2><p>Media Assets, Playback and Editing. 使用Apple自有框架。</p><h3 id="AVAsset"><a href="#AVAsset" class="headerlink" title="AVAsset"></a>AVAsset</h3><blockquote><p>AVAsset is an abstract, immutable class used to model timed audiovisual media such as videos and sounds. An asset may contain one or more tracks that are intended to be presented or processed together, each of a uniform media type, including but not limited to audio, video, text, closed captions, and subtitles.</p></blockquote><p>Audiovisual media的资源类，通常通过<code>AVURLAsset</code>用URL来实例化，可以用<a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">Atom Inspector</a>(一个Apple提供的用来查看视频信息的工具)来观察一个视频的属性，再去<code>AVAsset</code>中对应其属性。</p><table><thead><tr><th>AVAsset属性</th><th>视频文件属性</th></tr></thead><tbody><tr><td>duration: CMTime</td><td>duration, timescale时长和时间尺度</td></tr><tr><td>preferredRate: Float</td><td>默认速度</td></tr><tr><td>preferredVolume: Float</td><td>默认音量</td></tr><tr><td>creationDate: AVMetadataItem?</td><td>视频创建时间</td></tr><tr><td>tracks: [AVAssetTrack]</td><td>轨道</td></tr><tr><td>trackGroups: [AVAssetTrackGroup]</td><td>轨道组</td></tr><tr><td>lyrics: String?</td><td>当前语言环境合适的歌词</td></tr><tr><td>metadata: [AVMetadataItem]</td><td>元数据</td></tr></tbody></table><h3 id="AVPlayer"><a href="#AVPlayer" class="headerlink" title="AVPlayer"></a>AVPlayer</h3><blockquote><p>An AVPlayer is a controller object used to manage the playback and timing of a media asset. It provides the interface to control the player’s transport behavior such as its ability to play, pause, change the playback rate, and seek to various points in time within the media’s timeline. You can use an AVPlayer to play local and remote file-based media, such as QuickTime movies and MP3 audio files, as well as audiovisual media served using HTTP Live Streaming.</p></blockquote><p>AVPlayer是一个控制对象用于管理媒体asset的播放，它提供了相关的接口控制播放器的行为，比如：播放、暂停、改变播放的速率、跳转到媒体时间轴上的某一个点（简单理解就是实现拖动功能显示对应的视频位置内容）。我们能够使用AVPlayer播放本地和远程的媒体文件（使用 HTTP Live Streaming），比如： QuickTime movies 和 MP3 audio files，所以AVPlayer可以满足音视频播放的基本需求。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15009677046266.png?imageView2/0/q/100" alt="AVFoundation的层次" title="">                </div>                <div class="image-caption">AVFoundation的层次</div>            </figure></p><h3 id="AVPlayerItem"><a href="#AVPlayerItem" class="headerlink" title="AVPlayerItem"></a>AVPlayerItem</h3><blockquote><p>AVPlayerItem models the timing and presentation state of an asset played by an AVPlayer object. It provides the interface to seek to various times in the media, determine its presentation size, identify its current time, and much more. </p></blockquote><p><code>AVPlayerItem</code>是一个负责处理<code>AVAsset</code>的资源并通过<code>AVPlayer</code>来播放的载体，提供了<code>seek</code>、确定显示大小、ID、时间等的接口。</p><h3 id="AVPlayerLayer"><a href="#AVPlayerLayer" class="headerlink" title="AVPlayerLayer"></a>AVPlayerLayer</h3><blockquote><p>AVPlayerLayer is a subclass of CALayer to which an AVPlayer object can direct its visual output. It can be used as the backing layer for a UIView or NSView or can be manually added to the layer hierarchy to present your video content on screen.</p></blockquote><p>负责<code>AVPlayer</code>的视频输出展示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15012312808745.png?imageView2/0/q/100" alt="依赖关系图" title="">                </div>                <div class="image-caption">依赖关系图</div>            </figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class AVPlayerTestView: UIView &#123;</div><div class="line">    let view: UIView? = nil</div><div class="line">    func initPlayerView() &#123;</div><div class="line">        guard let url = URL.init(string: &quot;http://meipu1.video.meipai.com/5e81c08e-2850-4fbd-bfc4-4ded297f9f1c.mp&quot;) else &#123; return &#125;</div><div class="line">        let asset = AVAsset.init(url: url)</div><div class="line">        let item = AVPlayerItem.init(asset: asset)</div><div class="line">        let player = AVPlayer.init(playerItem: item)</div><div class="line">        let playerLayer = AVPlayerLayer.init(layer: player)</div><div class="line">        view?.layer.addSublayer(playerLayer)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置好一个<code>AVPlayer</code>的依赖关系和输出图层后，<code>AVPlayerItem</code>会根据你的URL去请求数据，自己内部做缓冲然后播放。我们需要做的是用KVO监听<code>AVPlayerItem</code>内部几个关键属性的状态，然后做出我们的处理。</p><table><thead><tr><th>AVPlayerItem属性</th><th>状态</th></tr></thead><tbody><tr><td>status: AVPlayerItemStatus</td><td></td></tr><tr><td>.unknown: AVPlayerItemStatus</td><td>未知状态</td></tr><tr><td>.readyToPlay: AVPlayerItemStatus</td><td>准备好去播放</td></tr><tr><td>.failed: AVPlayerItemStatus</td><td>资源无法被播放</td></tr><tr><td>loadedTimeRanges: [NSValue]</td><td>加载了的资源的时间范围(一般用来更新缓冲UI)</td></tr><tr><td>playbackBufferEmpty: Bool</td><td>没有缓冲数据</td></tr><tr><td>playbackLikelyToKeepUp: Bool</td><td>有足够的缓冲大致能播放无卡顿</td></tr></tbody></table><blockquote><p>General State Observations: You can use Key-value observing (KVO) to observe state changes to many of the player’s dynamic properties, such as its currentItem or its playback rate. You should register and unregister for KVO change notifications on the main thread. This avoids the possibility of receiving a partial notification if a change is being made on another thread. AVFoundation invokes observeValue(forKeyPath:of:change:context:) on the main thread, even if the change operation is made on another thread.</p><hr><p>基本状态观察者：你能够使用KVO来观察player动态属性的状态改变，比如像： currentItem 或者它的播放速度。我们应该在主线程注册和去除KVO，这能够避免如果在其它线程发送改变而导致接收局部通知，当发生通知，AVFoundation将在主线程调用observeValue(forKeyPath:of:change:context:) 方法，即使是在其他线程发生。</p></blockquote><p>KVO能够很好的观察生成的状态，但是并不能够观察播放时间的改变，所以AVPlayer提供了两个方法来观察时间的改变:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">    @param interval</div><div class="line">    调用block的时间间隔</div><div class="line">    @param queue</div><div class="line">    推荐使用串行队列，放在主线程就行了，并行队列会产生不明确的结果</div><div class="line">*/</div><div class="line">func addPeriodicTimeObserver(forInterval interval: CMTime, queue: DispatchQueue?, using block: @escaping (CMTime) -&gt; Void) -&gt; Any &#123;</div><div class="line">    // 可以在里面去设置控制状态，刷新进度UI</div><div class="line">&#125;</div><div class="line"></div><div class="line">func addBoundaryTimeObserver(forTimes times: [NSValue], queue: DispatchQueue?, using block: @escaping () -&gt; Void) -&gt; Any</div></pre></td></tr></table></figure><blockquote><p>Tips:</p><ul><li>创建多个<code>AVPlayerLayer</code>只有最近的layer才会显示视频帧</li><li>可以创建多个<code>AVPlayerItem</code>来替换<code>AVPlayer</code>的当前item，<code>func replaceCurrentItem(with item: AVPlayerItem?)</code></li><li>监听后要注意控制监听的生命周期</li></ul></blockquote><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>Apple自有的框架是没有提供缓存功能的，<code>AVPlayer</code>也没有提供直接获取其下载数据的接口，所以想做缓存只能自己来完整的实现。下面有几个方案。</p><h2 id="一、自己实现的播放器"><a href="#一、自己实现的播放器" class="headerlink" title="一、自己实现的播放器"></a>一、自己实现的播放器</h2><p>这种情况大多是根据下载来的数据解码播放，下载的时候做下缓存就好了</p><h2 id="二、自带播放器-LocalServer"><a href="#二、自带播放器-LocalServer" class="headerlink" title="二、自带播放器+LocalServer"></a>二、自带播放器+LocalServer</h2><p>在iOS本地开启<code>Local Server</code>服务，然后<code>MPMoviePlayerController</code>请求本地<code>Local Server</code>服务。本地<code>Local Server</code>服务再不停的去对应的视频地址获取视频流。本地Local Server请求的时候，就可以把视频流缓存在本地。<a href="http://code4app.com/ios/视频边下载边播放/5292c381cb7e8445678b5ac2#" target="_blank" rel="noopener">Demo来源:Code4App</a></p><h2 id="三、AVPlayer-AVMutableComposition-AVAssetExportSession"><a href="#三、AVPlayer-AVMutableComposition-AVAssetExportSession" class="headerlink" title="三、AVPlayer+AVMutableComposition+AVAssetExportSession"></a>三、AVPlayer+AVMutableComposition+AVAssetExportSession</h2><p>原理是直接给<code>AVPlayer</code>传URL，让其内部自己去处理数据下载，然后通过<code>AVMutableComposition</code>和<code>AVAssetExportSession</code>从<code>AVAsset</code>提取视频的数据进行缓存。</p><h3 id="AVMutableComposition"><a href="#AVMutableComposition" class="headerlink" title="AVMutableComposition"></a>AVMutableComposition</h3><blockquote><p>AVMutableComposition is a mutable subclass of AVComposition you use when you want to create a new composition from existing assets. You can add and remove tracks, and you can add, remove, and scale time ranges.</p></blockquote><p>作用是从现有的<code>AVAsset</code>中创建出一个新的<code>AVComposition</code>，使用者能够从别的asset中提取他们的音频轨道或视频轨道，并且把它们添加到新建的composition中。</p><h3 id="AVAssetExportSession"><a href="#AVAssetExportSession" class="headerlink" title="AVAssetExportSession"></a>AVAssetExportSession</h3><blockquote><p>An AVAssetExportSession object transcodes the contents of an AVAsset source object to create an output of the form described by a specified export preset.</p></blockquote><p>作用是把<code>AVAsset</code>解码输出到本地文件中。</p><p>关键需要把原先的<code>AVAsset(AVURLAsset)</code>实现的数据提取出来后拼接成另一个<code>AVAsset(AVComposition)</code>的数据然后解码输出，由于通过网络url下载下来的视频没有保存视频的原始数据（苹果没有暴露接口给我们获取），下载后播放的avasset不能使用<code>AVAssetExportSession</code>输出到本地文件，要曲线地把下载下来的视频通过重构成另外一个<code>AVAsset</code>实例才能输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">NSString *documentDirectory = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];</div><div class="line">NSString *myPathDocument = [documentDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@&quot;%@.mp4&quot;,[_source.videoUrl MD5]]];</div><div class="line"></div><div class="line"></div><div class="line">NSURL *fileUrl = [NSURL fileURLWithPath:myPathDocument];</div><div class="line"></div><div class="line">if (asset != nil) &#123;</div><div class="line">AVMutableComposition *mixComposition = [[AVMutableComposition alloc]init];</div><div class="line">AVMutableCompositionTrack *firstTrack = [mixComposition addMutableTrackWithMediaType:AVMediaTypeVideo preferredTrackID:kCMPersistentTrackID_Invalid];</div><div class="line">[firstTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero, asset.duration) ofTrack:[[asset tracksWithMediaType:AVMediaTypeVideo]objectAtIndex:0] atTime:kCMTimeZero error:nil];</div><div class="line"></div><div class="line">AVMutableCompositionTrack *audioTrack = [mixComposition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:kCMPersistentTrackID_Invalid];</div><div class="line">[audioTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero, asset.duration) ofTrack:[[asset tracksWithMediaType:AVMediaTypeAudio]objectAtIndex:0] atTime:kCMTimeZero error:nil];</div><div class="line"></div><div class="line">AVAssetExportSession *exporter = [[AVAssetExportSession alloc]initWithAsset:mixComposition presetName:AVAssetExportPresetHighestQuality];</div><div class="line">exporter.outputURL = fileUrl;</div><div class="line">if (exporter.supportedFileTypes) &#123;</div><div class="line">exporter.outputFileType = [exporter.supportedFileTypes objectAtIndex:0] ;</div><div class="line">exporter.shouldOptimizeForNetworkUse = YES;</div><div class="line">[exporter exportAsynchronouslyWithCompletionHandler:^&#123;</div><div class="line"></div><div class="line">&#125;];</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="四、AVPlayer-AVAssetResourceLoader"><a href="#四、AVPlayer-AVAssetResourceLoader" class="headerlink" title="四、AVPlayer+AVAssetResourceLoader"></a>四、AVPlayer+AVAssetResourceLoader</h2><h3 id="AVAssetResourceLoadingRequest"><a href="#AVAssetResourceLoadingRequest" class="headerlink" title="AVAssetResourceLoadingRequest"></a>AVAssetResourceLoadingRequest</h3><blockquote><p>An AVAssetResourceLoader object mediates resource requests from an AVURLAsset object with a delegate object that you provide. When a request arrives, the resource loader asks your delegate if it is able to handle the request and reports the results back to the asset.<br><code>AVAssetResourceLoader</code>协调来自<code>AVURLAsset</code>的资源请求，你需要实现它的<code>delegate</code>。当收到一个请求时，<code>ResourceLoader</code>询问你的<code>delegate</code>是否能处理并将结果返回给<code>asset</code>。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15003581605281.jpg?imageView2/0/q/100" alt="AVPlayer和AVAssetResourceLoader的层次结构" title="">                </div>                <div class="image-caption">AVPlayer和AVAssetResourceLoader的层次结构</div>            </figure><p><code>AVAssetResourceLoader</code>通过你提供的委托对象去调节<code>AVURLAsset</code>所需要的加载资源。而很重要的一点是，<code>AVAssetResourceLoader</code>仅在<code>AVURLAsset</code>不知道如何去加载这个URL资源时才会被调用，就是说你提供的委托对象在<code>AVURLAsset</code>不知道如何加载资源时才会得到调用。一般我们可以更改URL的scheme用来隐藏真实的URL。如：</p><blockquote><p>参考<br><a href="http://www.cnblogs.com/kenshincui/p/4186022.html#video" target="_blank" rel="noopener">iOS开发系列–音频播放、录音、视频播放、拍照、视频录制</a><br><a href="http://blog.csdn.net/longshihua/article/details/53909733" target="_blank" rel="noopener">AVplayer实现播放本地和网络视频（Swift3.0）</a><br><a href="http://www.cnblogs.com/zy1987/p/5028624.html" target="_blank" rel="noopener">iOS视频流开发（2）—视频播放</a><br><a href="http://msching.github.io/blog/2016/05/24/audio-in-ios-9/" target="_blank" rel="noopener">iOS音频播放 (九)：边播边缓存</a><br><a href="http://sky-weihao.github.io/2015/10/06/Video-streaming-and-caching-in-iOS/" target="_blank" rel="noopener">iOS音视频实现边下载边播放</a><br><a href="http://www.jianshu.com/p/9805be76ee68" target="_blank" rel="noopener">AVFoundation(二)：核心AVAsset</a><br><a href="http://1199game.com/2016/10/avfoundation-2/" target="_blank" rel="noopener">AVFoundation编程指南2-用AVPlayer播放视频</a><br><a href="http://www.jianshu.com/p/c6be05ffe418" target="_blank" rel="noopener">AV Foundation系列（五）媒体组合</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面會介紹視頻的一些基本知識，和在iOS上實現視頻播放和緩存的幾種方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;软解码和硬解码&lt;/strong&gt;&lt;br&gt;GPU解码就是所谓的硬解码，CPU解码就是软解码。iOS提供的播放器类使用的是硬解码，所以视
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://codingdoge.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>有限状态机在iOS中的应用</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E5%9C%A8iOS%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://codingdoge.cn/2017/07/23/title: 有限状态机在iOS中的应用/</id>
    <published>2017-07-23T15:47:00.000Z</published>
    <updated>2018-01-13T05:06:26.865Z</updated>
    
    <content type="html"><![CDATA[<p>有限状态机(Finite-State Machine, FSM)，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</p><p>其实我们平常和很多状态机都打过交道，比如正则表达式、网络协议（如TCP协议状态机）、游戏设计、字符串匹配等等，可能大多数时候我们都没意识到，接下来我们简略了解下状态机。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>状态(state): 指的是对象在其生命周期中的一种状况，处于某个特定状态中的对象必然会满足某些条件、执行某些动作或者是等待某些事件，而且状态是相对稳定的，如果没有外部条件的触发，一个状态会一直持续下去。</li><li>事件(event): 指的是对状态机来讲是有意义的那些事情。事件通常会引起状态的变迁，促使状态机从一种状态切换到另一种状态。</li><li>转换(transition): 指的是两个状态之间的一种关系，表明对象将在第一个状态中执行一定的动作，并将在某个事件发生的同时某个特定条件满足时进入第二个状态。</li><li>动作(action): 指的是状态机中可以执行的那些操作，当事件被满足或者状态变迁时执行动作，动作不是必需的。</li></ul><p>如下图状态表：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15001875969881.jpg?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><blockquote><p>关于状态机的详细知识可以参考：<br><a href="http://state-machine.com/psicc2/index.php" target="_blank" rel="noopener">UML状态图的实用C/C++设计</a><br><a href="http://erlang.org/doc/man/gen_fsm.html" target="_blank" rel="noopener">ERLANG</a></p></blockquote><h2 id="在iOS中的使用"><a href="#在iOS中的使用" class="headerlink" title="在iOS中的使用"></a>在iOS中的使用</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>假设我们要设计一款网络视频播放器，有基本的播放、暂停功能，当缓冲好时可以进行播放，当URL错误或者视频资源错误时播放失败，我们发现，当我们去描述一个事物以及它的功能时，总是离不开它的状态，如这个播放器，我们可以定义它有播放失败、缓冲中、将要播放…等等状态。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>我们可以用状态机去实现这样的功能。 </p><ul><li>先设定播放器可能出现的状态：</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">VideoPlayerState</span> &#123;</span></div><div class="line">    <span class="keyword">case</span> failed,           <span class="regexp">//</span> 播放失败</div><div class="line">         buffering,        <span class="regexp">//</span> 缓冲中</div><div class="line">         readyToPlay,      <span class="regexp">//</span> 将要播放</div><div class="line">         playing,          <span class="regexp">//</span> 播放中</div><div class="line">         paused,           <span class="regexp">//</span> 播放暂停</div><div class="line">         finished          /<span class="regexp">/ 播放完毕</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>然后定义当状态发生变换后，针对某个状态我希望它去执行一些逻辑里的动作</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> state: VideoPlayerState = <span class="selector-class">.paused</span> &#123;</div><div class="line">    didSet &#123;</div><div class="line">        switch state &#123;</div><div class="line">            case <span class="selector-class">.failed</span>:</div><div class="line">            <span class="comment">// 当视频加载失败时，我希望去执行的一些事件，比如弹出提示框</span></div><div class="line">            popReminderView()</div><div class="line">            </div><div class="line">            case <span class="selector-class">.buffering</span>:</div><div class="line">            </div><div class="line">            case <span class="selector-class">.readyToPlay</span>:</div><div class="line">            </div><div class="line">            case <span class="selector-class">.playing</span>:</div><div class="line">            </div><div class="line">            case <span class="selector-class">.paused</span>:</div><div class="line">            </div><div class="line">            case <span class="selector-class">.finished</span>:</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在写我们的业务逻辑时，相应的去更改播放器的状态</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 比如我们重写网络层的一些方法，当缓冲好时准备播放</span></div><div class="line"><span class="function"><span class="title">networkRequestCompletion</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    state = <span class="selector-class">.readyToPlay</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样，通过<code>state</code>我们能很清晰的知道现在播放器是什么样应该做什么事，在我们的业务逻辑中，当状态变化时通过<code>didSet</code>我们能很方便的去响应对应状态下应该执行的行为。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整篇文章质量或许不是很高，因为还没有大量的代码实践让我去有一个更深更全的体会，但是希望能带给我自己和读者们一点抛砖引玉的效果。我们在编码、设计过程中，多去思考一些，什么地方用什么样的模式更好，比如状态机，来使我们的代码更解耦，易维护，高扩展。</p><blockquote><p>这里有一篇关于<a href="http://www.jianshu.com/p/5eb45c64f3e3" target="_blank" rel="noopener">Objective-c状态机的实现</a>，更抽象，其中用到的枚举值自动转字符串通用方案很有意思，同时可以参考这篇《<a href="http://blog.csdn.net/songrotek/article/details/8929963" target="_blank" rel="noopener">iOS开发高级:使用宏定义macros</a>》关于宏定义的使用。<br>这篇《<a href="http://studentdeng.github.io/blog/2014/11/05/ios-architecture2/" target="_blank" rel="noopener">iOS APP 架构漫谈二</a>》列举了很具体的运用场景，可以参考。<br>同时参考的文章有：</p><ul><li><a href="http://helloitworks.com/754.html" target="_blank" rel="noopener">有限状态机</a></li><li><a href="http://www.cnblogs.com/chencheng/archive/2012/06/25/2562660.html" target="_blank" rel="noopener">有限状态机（FSM）的设计与实现</a></li></ul><p>关于状态记的开源库推荐：</p><ul><li>Objective-C: <a href="https://github.com/blakewatters/TransitionKit" target="_blank" rel="noopener">TransitionKit</a></li><li>Swift:<a href="https://github.com/ReactKit/SwiftTask" target="_blank" rel="noopener">SwiftTask</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有限状态机(Finite-State Machine, FSM)，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。&lt;/p&gt;
&lt;p&gt;其实我们平常和很多状态机都打过交道，比如正则表达式、网络协议（如TCP协议状态机）、游戏设计、字符串匹配等等，可能大多数时候我们
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Objective-C声明在头文件和实现文件中的区别</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20Objective-C%E5%A3%B0%E6%98%8E%E5%9C%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB%20%20/"/>
    <id>http://codingdoge.cn/2017/07/23/title: Objective-C声明在头文件和实现文件中的区别  /</id>
    <published>2017-07-23T15:47:00.000Z</published>
    <updated>2018-01-14T16:53:10.421Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="http://codecloud.net/objective-c-6782.html" target="_blank" rel="noopener">codecloud</a>(有整理)</p></blockquote><h2 id="调试程序的时候，突然想到这个问题，百度一下发现有不少这方面的问答，粗略总结一下"><a href="#调试程序的时候，突然想到这个问题，百度一下发现有不少这方面的问答，粗略总结一下" class="headerlink" title="调试程序的时候，突然想到这个问题，百度一下发现有不少这方面的问答，粗略总结一下:"></a>调试程序的时候，突然想到这个问题，百度一下发现有不少这方面的问答，粗略总结一下:</h2><ul><li>属性写在.h文件中和在.m文件中有什么区别?</li></ul><p>Objective-C中有分类和类扩展的概念，而实现文件中的类声明实际上就是类扩展.</p><blockquote><p>@interface部分为类扩展（extension）</p></blockquote><p>其被设计出来就是为了解决两个问题的</p><ol><li>定义类私有方法的地方，也就是下面说到的区别一</li><li>实现public readonly,private readwrite的property（意思是在h头文件中定义一个属性对外是readonly的，但在类的内部希望是可读写的，所以可以在m源文件中的@interface部分重新定义此属性为readwrite，此时此属性对外是只读的，对内是读写的）.  </li></ol><p>此外，也可在此部分申明变量和属性，但申明的变量，属性和方法均为私有的，只能够被当前类访问，相当于private。</p><h3 id="区别一："><a href="#区别一：" class="headerlink" title="区别一："></a>区别一：</h3><p>属性在.h文件中和在.m中声明是有区别的。区别就是，在.h文件中声明的属性，外部类可以通过“类实例.属性”来调用，但在.m中声明的则不可以，获取和设置的方法，只能是通过setValue:forKey和valueForKey来实现。</p><p>成员变量，有三种权限，就是大家都知道的@private、@protected、@public ，写在.m文件中时，相当于是@private权限，子类无法访问，验证了一下，做权限修改也无效。而写在.h文件中，默认是@protected权限，子类可以访问，可以做权限修改。因为访问权限指针对.h文件。.h文件中成员变量，外部类对其的调用，跟C++一样，用-&gt;来调用。</p><h3 id="区别二"><a href="#区别二" class="headerlink" title="区别二"></a>区别二</h3><p>这样可以提高编译效率，避免重复编译。<br>因为分开的话只需要编译一次生成对应的.obj文件后，再次应用该类的地方，这个类就不会被再次编译，从而大大提高了效率。这样可以提高编译效率，避免重复编译.</p><blockquote><p>怎么去解释呢…其实这是一个面向对象的思想，所谓”提高”的比较对象，应该是直接将方法写到具体函数里的实现方式.<br>h为编译器提供一个索引、声明，连接obj对象和主程序.<br>编译器在编译的时候，如果需要，则去查找h，找到了h，再找对应的obj，就可以找到类的方法了.<br>但是如果直接写入到同一个文件（例如hpp），主程序没有索引，也不清楚具体的类实现了没有，只能一次次重复的编译相同的代码，这样实际上没有把这个类该有的东西抽象出来.<br>对于函数声明在头文件中，在实现文件中实现，也是避免重复编译，函数可以多次声明，但只能实现一次.</p></blockquote><h2 id="头文件相对于实现文件的作用在于"><a href="#头文件相对于实现文件的作用在于" class="headerlink" title="头文件相对于实现文件的作用在于:"></a>头文件相对于实现文件的作用在于:</h2><ol><li><p>头文件可以预先告诉编译器一些必要的声明,让编译器顺利进行下去,在连接实现以前.未必出现实际的定义.</p><pre><code>头文件的意义在:* 使得程序简明,清晰.* 避免了重复编写相同的声明代码.</code></pre></li><li><strong>.c和</strong>.h文件没有必然的联系.</li></ol><h2 id="关于头文件和实现文件的编译连接的过程"><a href="#关于头文件和实现文件的编译连接的过程" class="headerlink" title="关于头文件和实现文件的编译连接的过程"></a>关于头文件和实现文件的编译连接的过程</h2><p>其实要理解C文件与头文件有什么不同之处，首先需要弄明白编译器的工作过程，一般说来编译器会做以下几个过程:</p><ol><li>预处理阶段</li><li>词法与语法分析阶段</li><li>编译阶段，首先编译成纯汇编语句，再将之汇编成跟CPU相关的二进制码，生成各个目标文件</li><li>连接阶段，将各个目标文件中的各段代码进行绝对地址定位，生成跟特定平台相关的可执行文件，当然，最后还可以用<code>objcopy</code>生成纯二进制<br>码，也就是去掉了文件格式信息.</li></ol><p>编译器在编译时是以C文件为单位进行的，也就是说如果你的项目中一个C文件都没有，那么你的项目将无法编译，连接器是以目标文件为单位，它将一个或多个目标文件进行函数与变量的重定位，生成最终的可执行文件，在PC上的程序开发，一般都有一个<code>main</code>函数，这是各个编译器的约定，当然，你如果自己写连接器脚本的话，可以不用<code>main</code>函数作为程序入口！！！</p><p>有了这些基础知识，再言归正传，为了生成一个最终的可执行文件，就需要一些目标文件，也就是需要C文件，而这些C文件中又需要一个main函数作为可执行程序的入口，那么我们就从一个C文件入手，假定这个C文件内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> \<span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> “mytest.h”</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">test = <span class="number">25</span>;</div><div class="line"><span class="built_in">printf</span>(“test……………..%d\n”,test);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>头文件内容如下:<br><code>int test;</code></p><h3 id="现在以这个例子来讲解编译器的工作"><a href="#现在以这个例子来讲解编译器的工作" class="headerlink" title="现在以这个例子来讲解编译器的工作:"></a>现在以这个例子来讲解编译器的工作:</h3><ol><li><p>预处理阶段:<br>编译器以C文件作为一个单元，首先读这个C文件，发现第一句与第二句是包含一个头文件，就会在所有搜索路径中寻找这两个文件，找到之后，就会将相应头文件中再去处理宏，变量，函数声明，嵌套的头文件包含等，检测依赖关系，进行宏替换，看是否有重复定义与声明的情况发生，最后将那些文件中所有的东东全部扫描进这个当前的C文件中，形成一个中间“C文件”</p></li><li><p>编译阶段:<br>在上一步中相当于将那个头文件中的test变量扫描进了一个中间C文件，那么test变量就变成了这个文件中的一个全局变量，此时就将所有这个中间C文件的所有变量，函数分配空间，将各个函数编译成二进制码，按照特定目标文件格式生成目标文件，在这种格式的目标文件中进行各个全局变量，函数的符号描述，将这些二进制码按照一定的标准组织成一个目标文件</p></li><li><p>连接阶段:<br>将上一步成生的各个目标文件，根据一些参数，连接生成最终的可执行文件，主要的工作就是重定位各个目标文件的函数，变量等，相当于将个目标文件中的二进制码按一定的规范合到一个文件中  </p></li></ol><h2 id="再回到C文件与头文件各写什么内容的话题上："><a href="#再回到C文件与头文件各写什么内容的话题上：" class="headerlink" title="再回到C文件与头文件各写什么内容的话题上："></a>再回到C文件与头文件各写什么内容的话题上：</h2><p>理论上来说C文件与头文件里的内容，只要是C语言所支持的，无论写什么都可以的，比如你在头文件中写函数体，只要在任何一个C文件包含此头文件就可以将这个函数编译成目标文件的一部分（编译是以C文件为单位的，如果不在任何C文件中包含此头文件的话，这段代码就形同虚设），你可以在C文件中进行函数声明，变量声明，结构体声明，这也不成问题！！！<br>那为何一定要分成头文件与C文件呢？又为何一般都在头件中进行函数，变量声明，宏声明，结构体声明呢？而在C文件中去进行变量定义，函数实现呢？？<br>原因如下:</p><ol><li><p>如果在头文件中实现一个函数体，那么如果在多个C文件中引用它，而且又同时编译多个C文件，将其生成的目标文件连接成一个可执行文件，在每个引用此头文件的C文件所生成的目标文件中，都有一份这个函数的代码，如果这段函数又没有定义成局部函数，那么在连接时，就会发现多个相同的函数，就会报错</p></li><li><p>如果在头文件中定义全局变量，并且将此全局变量赋初值，那么在多个引用此头文件的C文件中同样存在相同变量名的拷贝，关键是此变量被赋了初值，所以编译器就会将此变量放入DATA段，最终在连接阶段，会在DATA段中存在多个相同的变量，它无法将这些变量统一成一个变量，也就是仅为此变量分配一个空间，而不是多份空间，假定这个变量在头文件没有赋初值，编译器就会将之放入BSS段，连接器会对BSS段的多个同名变量仅分配一个存储空间</p></li><li><p>如果在C文件中声明宏，结构体，函数等，那么我要在另一个C文件中引用相应的宏，结构体，就必须再做一次重复的工作，如果我改了一个C文件中的一个声明，那么又忘了改其它C文件中的声明，这不就出了大问题了，程序的逻辑就变成了你不可想象的了，如果把这些公共的东东放在一个头文件中，想用它的C文件就只需要引用一个就OK了！！！这样岂不方便，要改某个声明的时候，只需要动一下头文件就行了</p></li><li><p>在头文件中声明结构体，函数等，当你需要将你的代码封装成一个库，让别人来用你的代码，你又不想公布源码，那么人家如何利用你的库呢？也就是如何利用你的库中的各个函数呢？？一种方法是公布源码，别人想怎么用就怎么用，另一种是提供头文件，别人从头文件中看你的函数原型，这样人家才知道如何调用你写的函数，就如同你调用printf函数一样，里面的参数是怎样的？？你是怎么知道的？？还不是看人家的头文件中的相关声明啊！！！当然这些东东都成了C标准，就算不看人家的头文件，你一样可以知道怎么使用.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转自&lt;a href=&quot;http://codecloud.net/objective-c-6782.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;codecloud&lt;/a&gt;(有整理)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="OC" scheme="http://codingdoge.cn/tags/OC/"/>
    
      <category term="转载" scheme="http://codingdoge.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>xcode常用快捷键及其他功能</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20xcode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD/"/>
    <id>http://codingdoge.cn/2017/07/23/title: xcode常用快捷键及其他功能/</id>
    <published>2017-07-23T15:47:00.000Z</published>
    <updated>2018-01-13T05:05:53.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><hr><p>Command+R生成并运行程序<br>Command+B只生成程序而不运行它<br>Command+T新建选项卡  </p><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><hr><p>// MARK: - \<label name=""><br>// TODO: \<text you="" want="" to="" remember=""><br>// FIXME: \<text you="" want="" to="" remember="">  </text></text></label></p><h3 id="小功能"><a href="#小功能" class="headerlink" title="小功能"></a>小功能</h3><hr><p>Product&gt;Clean删除生成的中间文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Command+R生成并运行程序&lt;br&gt;Command+B只生成程序而不运行它&lt;br&gt;Command+T新建选项卡  &lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Tool" scheme="http://codingdoge.cn/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>OC中ARC forbids explicit message send of &#39;...&#39;错误</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20OC%E4%B8%ADARC%20forbids%20explicit%20message%20send%20of%20&#39;...&#39;%E9%94%99%E8%AF%AF%20%20/"/>
    <id>http://codingdoge.cn/2017/07/23/title: OC中ARC forbids explicit message send of &#39;...&#39;错误  /</id>
    <published>2017-07-23T15:25:00.000Z</published>
    <updated>2018-01-14T17:00:06.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="http://blog.csdn.net/hahahacff/article/details/39859901" target="_blank" rel="noopener"><strong>CSDN hahahacff</strong></a><br>有所整理</p></blockquote><h3 id="ARC-forbids-explicit-message-send-of’retainCount’"><a href="#ARC-forbids-explicit-message-send-of’retainCount’" class="headerlink" title="ARC forbids explicit message send of’retainCount’"></a>ARC forbids explicit message send of’retainCount’</h3><ul><li>同’release’等等<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15159489066776.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>很显然，是<strong>ARC</strong>的问题。<br>错误原因：在创建工程的时候点选了<strong>“Use Automatic Reference Counting”</strong>选项,但是又调用了对象的<strong>retainCount</strong>方法</li></ul><h2 id="ARC是什么"><a href="#ARC是什么" class="headerlink" title="ARC是什么?"></a>ARC是什么?</h2><p>ARC是iOS 5推出的新功能，全称叫ARC(AutomaticReferenceCounting)。<br>简单地说，就是代码中自动加入了retain/release，原先需要手动添加的用来处理内存管理的引用计数的代码可以自动地由编译器完成了。该机制在iOS 5/ Mac OS X 10.7 开始导入，利用 Xcode4.2可以使用该机制。简单地理解ARC，就是通过指定的语法，让编译器(LLVM3.0)在编译代码时，自动生成实例的引用计数管理部分代码。有一点，ARC并不是GC，它只是一种代码静态分析（StaticAnalyzer）工具。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>选择要项目，双击中间的工程名称，进入build setting<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images2015.cnblogs.com/blog/922727/201605/922727-20160520121424544-662684677.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>将中间的Objective-C Automatic Reference Counting改为no</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转自&lt;a href=&quot;http://blog.csdn.net/hahahacff/article/details/39859901&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;CSDN hahahacff&lt;/s
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Bug" scheme="http://codingdoge.cn/tags/Bug/"/>
    
      <category term="OC" scheme="http://codingdoge.cn/tags/OC/"/>
    
      <category term="转载" scheme="http://codingdoge.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>解决Arduino CH34x系列在macOS Sierra中找不到串口的问题</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20%E8%A7%A3%E5%86%B3Arduino%20CH34x%E7%B3%BB%E5%88%97%E5%9C%A8macOS%20Sierra%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0%E4%B8%B2%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://codingdoge.cn/2017/07/23/title: 解决Arduino CH34x系列在macOS Sierra中找不到串口的问题/</id>
    <published>2017-07-23T15:06:00.000Z</published>
    <updated>2018-01-12T14:23:28.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>毕设做Arduino开发，一开始买了淘宝上慧净自己改的Arduino UNO国产板子，回来插在mac上读不出串口，安装了它附带的驱动还是读不出，同学买了原装板说一插上就能读出串口，都没自己装驱动，为了省麻烦，直接跟商家换了原装板，这时候麻烦来了，板子在我电脑上读不出串口，在别人电脑上能读出来，别人的在我电脑上也读不出来…很崩溃，然后从各个角度debug，下面一个个步骤来，基本能解决。  </p></blockquote><ol><li>安装<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">Arduino IDE</a><br>上面是官网IDE下载的连接，大概是因为GFW的原因下载速度奇慢，大家也可以去搜Arduino中文社区，里面有好人做了*度网盘的下载种子，速度能快点。<br>IDE一般自带驱动，如果在串口里没发现，可以试试在<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/D7389412-ED23-427D-82E7-4E1C26114D67.png?imageView2/0/q/100" alt="D7389412-ED23-427D-82E7-4E1C26114D67" title="">                </div>                <div class="image-caption">D7389412-ED23-427D-82E7-4E1C26114D67</div>            </figure></li></ol><p>这个系统报告里看看USB下面能不能读出</p><p>也可以在bash里输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ls</span> <span class="string">/dev/tty</span>*</div></pre></td></tr></table></figure><p>如果有类似的即可<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/2C66575E-D0DD-4DEA-9F34-8F2E1CF4DA90.png?imageView2/0/q/100" alt="2C66575E-D0DD-4DEA-9F34-8F2E1CF4DA90" title="">                </div>                <div class="image-caption">2C66575E-D0DD-4DEA-9F34-8F2E1CF4DA90</div>            </figure></p><ol><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="noopener">官方驱动下载</a><br>如果都找不到的话可以去沁恒官方下载CH341SER驱动，安装后再查看一遍(安装驱动完会要求重启).</p></li><li><p>更改SIP设置</p><blockquote><p>Apple在10.11中全面启用了名为 System Integrity Protection (SIP) 的系统完整性保护技术. 受此影响, 未经签名的第三方kext及经过修改的原版kext将无法正常加载, 大部分系统文件即使在root用户下也无法直接进行修改.    </p></blockquote></li></ol><p>前面安装驱动不成功大部分是因为驱动文件冲突导致，所以在此之前先删除之前安装的驱动文件:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /System/Library/Extensions/usb<span class="selector-class">.kext</span></div><div class="line">sudo rm -rf /Library/Extensions/usbserial<span class="selector-class">.kext</span></div><div class="line">sudo rm -rf _private_var_db_receipts/com<span class="selector-class">.wch</span>.*</div></pre></td></tr></table></figure><p>然后参考<a href="https://tzapu.com/making-ch340-ch341-serial-adapters-work-under-el-capitan-os-x/" target="_blank" rel="noopener">CH340 CH341 serial adapters fix for El Capitan OS X</a>可以通过以下步骤修改SIP设置来安装第三方kext:</p><ol><li>重启OS X 并且立即按住 Command+ R 来来进入恢复模式</li><li>在恢复模式中, 菜单栏上面找到终端(Terminal)并打开</li><li>在终端中键入命令<code>csrutil enable —without kext</code></li><li>看到成功的提示信息之后, 输入reboot重启系统<blockquote><p>注: <code>—without kext 中的</code> - 有两条<br>Command 就是 ⌘ 图标  </p></blockquote></li></ol><p>通过以上的操作之后, 采用CH340/1 系列芯片的Arduino开发板又可以被识别出来了. 如果还是无法识别, 请重新安装一次CH341SER驱动.</p><ul><li>最后如果还不行(我的就是到这里还不行)，请看看你的板子是否接触不良，反复摩擦尝试看能不能读出串口，我之前也试过这个办法，但是没有用，后面偶然也是必然下反应过来，反反复复插USB拔出查看串口状态，终于解决了(无良商家害人)</li></ul><blockquote><p>参考:<br><a href="https://support.apple.com/zh-tw/HT204063" target="_blank" rel="noopener">如何重置 Mac 上的 NVRAM</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;毕设做Arduino开发，一开始买了淘宝上慧净自己改的Arduino UNO国产板子，回来插在mac上读不出串口，安装了它附带的驱动还是读不出，同学买了原装板说一插上就能读出串口，都没自己装驱动，为了省麻烦，直接跟商家换了原装板，这时候麻烦来了，板
      
    
    </summary>
    
      <category term="OS" scheme="http://codingdoge.cn/categories/OS/"/>
    
    
      <category term="Bug" scheme="http://codingdoge.cn/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>《TCP/IP详解》笔记—第1章 概述</title>
    <link href="http://codingdoge.cn/2017/07/23/title:%20%E3%80%8ATCP-IP%E8%AF%A6%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E7%AC%AC1%E7%AB%A0%20%E6%A6%82%E8%BF%B0/"/>
    <id>http://codingdoge.cn/2017/07/23/title: 《TCP-IP详解》笔记—第1章 概述/</id>
    <published>2017-07-23T15:04:00.000Z</published>
    <updated>2018-01-12T14:22:22.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《TCP-IP详解》笔记—第1章-概述"><a href="#《TCP-IP详解》笔记—第1章-概述" class="headerlink" title="《TCP/IP详解》笔记—第1章 概述"></a><a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/1/" target="_blank" rel="noopener">《TCP/IP详解》笔记—第1章 概述</a></h1><blockquote><p>一个互连网就是一组通过相同协议族互连在一起的网络。  </p></blockquote><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>TCP/IP通常被认为是一个四层协议系统:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/WX20170320-171317@2x.png?imageView2/0/q/100" alt="WX20170320-171317@2x" title="">                </div>                <div class="image-caption">WX20170320-171317@2x</div>            </figure></p><p>网络层和运输层之间的区别是最为关键的：网络层（IP）提供点到点的服务，而运输层（TCP和UDP）提供端到端的服务。</p><p>在TCP/IP协议族中，网络层IP提供的是一种不可靠的服务。也就是说，它只是尽可能快地把分组从源结点送到目的结点，但是并不提供任何可靠性保证。而另一方面，TCP在不可靠的IP层上提供了一个可靠的运输层。为了提供这种可靠的服务，TCP采用了超时重传、发送和接收端到端的确认分组等机制。</p><p>路由器为不同类型的物理网络提供连接。</p><p>一个主机也可以有多个接口，但一般不称作路由器,除非它的功能只是单纯地把分组从一个接口传送到另一个接口。</p><p>互联网的目的之一是在应用程序中隐藏所有的物理细节。</p><p>连接网络的另一个途径是使用网桥。网桥是在链路层上对网络进行互连，而路由器则是在网络层上对网络进行互连。</p><h2 id="互联网的地址"><a href="#互联网的地址" class="headerlink" title="互联网的地址"></a>互联网的地址</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/47F26D90-176D-4C0A-A315-6A9E199E79F6.png?imageView2/0/q/100" alt="47F26D90-176D-4C0A-A315-6A9E199E79F6" title="">                </div>                <div class="image-caption">47F26D90-176D-4C0A-A315-6A9E199E79F6</div>            </figure><p>这些 32 位的地址通常写成四个十进制的数,其中每个整数对应一个字节。这种表示方法称作“点分十进制表示法(Dotted decimal notation)”。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/70807FBE-712D-4A5C-97F2-BBCA12C1F11D.png?imageView2/0/q/100" alt="70807FBE-712D-4A5C-97F2-BBCA12C1F11D" title="">                </div>                <div class="image-caption">70807FBE-712D-4A5C-97F2-BBCA12C1F11D</div>            </figure></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>TCP传给IP的数据单元称作TCP报文段或简称为TCP段（TCP segment）。IP传给网络接口层的数据单元称作IP数据报(IP datagram)。通过以太网传输的比特流称作帧(Frame)。</p><h2 id="分用"><a href="#分用" class="headerlink" title="分用"></a>分用</h2><p>当目的主机收到一个以太网数据帧时，数据就开始从协议栈中由底向上升，同时去掉各层协议加上的报文首部。每层协议盒都要去检查报文首部中的协议标识，以确定接收数据的上层协议。这个过程称作分用（Demultiplexing）。</p><h2 id="客户-服务器模型"><a href="#客户-服务器模型" class="headerlink" title="客户-服务器模型"></a>客户-服务器模型</h2><p>大部分网络应用程序在编写时都假设一端是客户，另一端是服务器，其目的是为了让服务器为客户提供一些特定的服务。<br>一般来说，TCP服务器是并发的，而UDP服务器是重复的。</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ol><li>请计算最多有多少个A类、B类和C类网络号。</li><li>用匿名FTP（见27.3节）从主机nic.merit.edu上获取文件nsfnet_statistics_history.netcount。该文件包含在NSFNET网络上登记的国内和国外的网络数。画一坐标系，横坐标代表年，纵坐标代表网络总数的对数值。纵坐标的最大值是习题1.1的结果。如果数据显示一个明显的趋势，请估计按照当前的编址体制推算，何时会用完所有的网络地址（3.10节讨论解决该难题的建议）。</li><li>获取一份主机需求<strong>RFC</strong>拷贝[Braden 1989a]，阅读有关应用于TCP/IP协议族每一层的稳健性原则。这个原则的参考对象是什么？</li><li>获取一份最新的赋值<strong>RFC</strong>拷贝。“quote of the day”协议的有名端口号是什么？哪个<strong>RFC</strong>对该协议进行了定义？</li><li>如果你有一个接入TCP/IP互联网的主机帐号，它的主IP地址是多少？这台主机是否接入了Internet？它是多接口主机吗？</li><li>获取一份<strong>RFC</strong> 1000的拷贝，了解RFC这个术语从何而来。</li><li>与<strong>Internet</strong>协会联系，isoc@isoc.org或者<strong>+170 3648 9888</strong>，了解有关加入的情况。</li><li>用匿名FTP从主机is.internic.net处获取文件about-internic/information-about-the-internic。</li></ol><h2 id="部分习题答案"><a href="#部分习题答案" class="headerlink" title="部分习题答案"></a>部分习题答案</h2><ol><li>答案是：27-2（126）＋214-2（16 382）＋221-2（2 097 150）=2 113 658。每一部分都减去2是因为全0或全1网络ID是非法的。</li><li>图D-1显示了直到1993年8月的有关数据。如果网络数继续呈指数增长的话，虚线估计了2000年可能达到的最大的网络数。</li><li>“自由地接收，保守地发送。”</li></ol><blockquote><p>资料来源于 <a href="http://www.52im.net/" target="_blank" rel="noopener">即时通讯网</a>，仅做学习参考  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《TCP-IP详解》笔记—第1章-概述&quot;&gt;&lt;a href=&quot;#《TCP-IP详解》笔记—第1章-概述&quot; class=&quot;headerlink&quot; title=&quot;《TCP/IP详解》笔记—第1章 概述&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://docs.52im.net
      
    
    </summary>
    
      <category term="Network" scheme="http://codingdoge.cn/categories/Network/"/>
    
    
      <category term="Reading Notes" scheme="http://codingdoge.cn/tags/Reading-Notes/"/>
    
  </entry>
  
  <entry>
    <title>STL常见用法 — map</title>
    <link href="http://codingdoge.cn/2017/07/21/title:%20STL%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%20%E2%80%94%20map/"/>
    <id>http://codingdoge.cn/2017/07/21/title: STL常见用法 — map/</id>
    <published>2017-07-21T05:10:00.000Z</published>
    <updated>2018-01-14T17:04:04.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STL常见用法-—"><a href="#STL常见用法-—" class="headerlink" title="STL常见用法 —"></a>STL常见用法 —</h1><blockquote><p>代码敲得少，STL总是用的不熟，便自己整理一些用法，有眼缘的顺手用着吧。 </p></blockquote><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>maps是一个关联容器，用来存储key-value式的元素，提供一对一hash。内部的实现，自建一颗红黑树，这棵树具有对数据自动排序的功能。比如一个班级中，每个学生的学号和他的姓名就存在一对一映射的关系。</p><ul><li>第一个值是关键字(key)，每个关键字只能在map中出现一次</li><li>第二个值为关键字的值(value)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://oo8snaf4x.bkt.clouddn.com/15014668312515.png?imageView2/0/q/100" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">template&lt;</div><div class="line">    class Key,</div><div class="line">    class T,</div><div class="line">    class Compare = std::less&lt;Key&gt;,</div><div class="line">    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt;</div><div class="line">&gt; class map;</div></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">namespace pmr &#123;</div><div class="line">    template &lt;class Key, class T, class Compare = std::less&lt;Key&gt;&gt;</div><div class="line">    using map = std::map&lt;Key, T, Compare,</div><div class="line">                         std::pmr::polymorphic_allocator&lt;std::pair&lt;const Key,T&gt;&gt;&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>成员函数</th><th>实现操作</th></tr></thead><tbody><tr><td>begin</td><td>返回一个起始的迭代器</td></tr><tr><td>end</td><td>返回一个末尾的迭代器</td></tr><tr><td>empty</td><td>检查容器是否为空</td></tr><tr><td>size</td><td>返回容器内元素个数</td></tr><tr><td>clear</td><td>清除容器内容</td></tr><tr><td>insert</td><td>插入元素或节点</td></tr><tr><td>erase</td><td>删除元素</td></tr><tr><td>swap</td><td>交换内容</td></tr><tr><td>count</td><td>返回指定key的元素个数</td></tr><tr><td>find</td><td>通过key查找元素</td></tr></tbody></table><h2 id="用法演示"><a href="#用法演示" class="headerlink" title="用法演示"></a>用法演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">void mapTest()</div><div class="line">&#123;</div><div class="line">    std::map&lt;int, int&gt; m;      // 构造函数</div><div class="line">    m.insert(pair&lt;int, int&gt;(1, 10));   // 插入元素</div><div class="line">    m.insert(pair&lt;int, int&gt;(2, 30));</div><div class="line">    m.insert(pair&lt;int, int&gt;(4, 50));</div><div class="line">    map&lt;int, int&gt;::iterator it;    // 迭代器</div><div class="line">    it = m.find(3);    // 通过key查找元素</div><div class="line">    if (it == m.end()) // 如果返回值为尾部迭代器则无此元素</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; &quot;Not find&quot; &lt;&lt; endl;</div><div class="line">        m.insert(pair&lt;int, int&gt;(3, 20));</div><div class="line">    &#125;</div><div class="line">    for (it = m.begin(); it != m.end(); it++)  // 通过迭代器遍历map容器</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;   // 通过迭代器访问元素的key-value</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参考:<br><a href="http://mropengate.blogspot.com/2015/12/cc-map-stl.html" target="_blank" rel="noopener">C/C++ - Map (STL) 用法與心得完全攻略</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;STL常见用法-—&quot;&gt;&lt;a href=&quot;#STL常见用法-—&quot; class=&quot;headerlink&quot; title=&quot;STL常见用法 —&quot;&gt;&lt;/a&gt;STL常见用法 —&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代码敲得少，STL总是用的不熟，便自己整理一些用法，有眼缘
      
    
    </summary>
    
      <category term="CPP" scheme="http://codingdoge.cn/categories/CPP/"/>
    
    
      <category term="STL" scheme="http://codingdoge.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL常见用法 — vector</title>
    <link href="http://codingdoge.cn/2017/07/21/title:%20STL%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%20%E2%80%94%20vector/"/>
    <id>http://codingdoge.cn/2017/07/21/title: STL常见用法 — vector/</id>
    <published>2017-07-21T05:06:00.000Z</published>
    <updated>2018-01-14T17:04:41.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>代码敲得少，STL总是用的不熟，便自己整理一些用法，有眼缘的顺手用着吧。 </p></blockquote><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vector是线性容器,它的元素严格的按照线性序列排序,和动态数组很相似,和数组一样,它的元素存储在一块连续的存储空间中,这也意味着我们不仅可以使用迭代器(iterator)访问元素,还可以使用指针的偏移方式访问,和常规数组不一样的是,vector能够自动存储元素,可以自动增长或缩小存储空间。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Allocator</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt; &gt; <span class="class"><span class="keyword">class</span> <span class="title">vector</span>;</span></div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="keyword">namespace</span> pmr &#123;</div><div class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">using</span> <span class="title">vector</span> = <span class="title">std</span>::<span class="built_in">vector</span>&lt;T, <span class="built_in">std</span>::pmr::polymorphic_allocator&lt;T&gt;&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><ol><li>std::vector is a sequence container that encapsulates dynamic size arrays.</li><li>std::pmr::vector is an alias template that uses a polymorphic allocator</li></ol></blockquote><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>成员函数</th><th>实现操作</th></tr></thead><tbody><tr><td>c.assign(beg,end)</td><td>将[beg; end)区间中的数据赋值给c</td></tr><tr><td>c.assign(n,elem)</td><td>将n个elem的拷贝赋值给c</td></tr><tr><td>c.at(idx)</td><td>传回索引idx所指的数据，如果idx越界，抛出out_of_range</td></tr><tr><td>c.back()</td><td>传回最后一个数据，不检查这个数据是否存在</td></tr><tr><td>c.begin()</td><td>传回迭代器重的可一个数据</td></tr><tr><td>c.capacity()</td><td>返回容器中数据个数</td></tr><tr><td>c.clear()</td><td>移除容器中所有数据</td></tr><tr><td>c.empty()</td><td>判断容器是否为空</td></tr><tr><td>c.end()</td><td>指向迭代器中的最后一个数据地址</td></tr><tr><td>c.erase(pos)</td><td>删除pos位置的数据，传回下一个数据的位置</td></tr><tr><td>c.erase(beg,end)</td><td>删除[beg,end)区间的数据，传回下一个数据的位置</td></tr><tr><td>c.front()</td><td>传回第一个数据</td></tr><tr><td>get_allocator</td><td>使用构造函数返回一个拷贝</td></tr><tr><td>c.insert(pos,elem)</td><td>在pos位置插入一个elem拷贝，传回新数据位置</td></tr><tr><td>c.insert(pos,n,elem)</td><td>在pos位置插入n个elem数据。无返回值</td></tr><tr><td>c.insert(pos,beg,end)</td><td>在pos位置插入在[beg,end)区间的数据。无返回值</td></tr><tr><td>c.max_size()</td><td>返回容器中最大数据的数量</td></tr><tr><td>c.pop_back()</td><td>删除最后一个数据</td></tr><tr><td>c.push_back(elem)</td><td>在尾部加入一个数据</td></tr><tr><td>c.rbegin()</td><td>传回一个逆向队列的第一个数据</td></tr><tr><td>c.rend()</td><td>传回一个逆向队列的最后一个数据的下一个位置</td></tr><tr><td>c.resize(num)</td><td>重新指定队列的长度</td></tr><tr><td>c.reserve()</td><td>保留适当的容量</td></tr><tr><td>c.size()</td><td>返回容器中实际数据的个数</td></tr><tr><td>c1.swap(c2)</td><td>将c1和c2元素互换</td></tr><tr><td>swap(c1,c2)</td><td>同上操作</td></tr><tr><td>vector<elem> c</elem></td><td>创建一个空的vector</td></tr><tr><td>vector <elem> c1(c2)</elem></td><td>复制一个vector</td></tr><tr><td>vector <elem> c(n)</elem></td><td>创建一个vector，含有n个数据，数据均已缺省构造产生</td></tr><tr><td>vector <elem> c(n, elem)</elem></td><td>创建一个含有n个elem拷贝的vector。</td></tr><tr><td>vector <elem> c(beg,end)</elem></td><td>创建一个以[beg;end)区间的vector</td></tr><tr><td>c.~ vector <elem>()</elem></td><td>销毁所有数据，释放内存</td></tr></tbody></table><h2 id="用法演示"><a href="#用法演示" class="headerlink" title="用法演示"></a>用法演示</h2><ul><li>使用reverse将元素翻转:<br>需要头文件<code>#include&lt;algorithm&gt;</code></li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reverse(<span class="name">vec</span>.begin(),vec.end())<span class="comment">;</span></div></pre></td></tr></table></figure><p>将元素翻转(在vector中，如果一个函数中需要两个迭代器，一般后一个都不包含)</p><ul><li>使用sort排序:<br>需要头文件#include<algorithm>，<br>sort(vec.begin(),vec.end());(默认是按升序排列,即从小到大).<br>可以通过重写排序比较函数按照降序比较，如下:</algorithm></li></ul><p>定义排序比较函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Comp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a,<span class="keyword">const</span> <span class="keyword">int</span> &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用时:<code>sort(vec.begin(),vec.end(),Comp)</code>，这样就降序排序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;代码敲得少，STL总是用的不熟，便自己整理一些用法，有眼缘的顺手用着吧。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;
      
    
    </summary>
    
      <category term="CPP" scheme="http://codingdoge.cn/categories/CPP/"/>
    
    
      <category term="STL" scheme="http://codingdoge.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>常用宏定义</title>
    <link href="http://codingdoge.cn/2017/07/17/title:%20%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://codingdoge.cn/2017/07/17/title: 常用宏定义/</id>
    <published>2017-07-17T06:08:00.000Z</published>
    <updated>2018-01-13T05:07:28.710Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/songrotek/article/details/8929963" target="_blank" rel="noopener">iOS开发高级:使用宏定义macros</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 打印日志</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line"><span class="meta">#    <span class="meta-keyword">define</span> DLog(...) NSLog(__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#    <span class="meta-keyword">define</span> DLog(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//2. 获取屏幕 宽度、高度</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> kScreenWidth ([UIScreen mainScreen].bounds.size.width)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> kScreenHeight ([UIScreen mainScreen].bounds.size.height)</span></div><div class="line"></div><div class="line"><span class="comment">//3. 颜色</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RGB(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HEXCOLOR(c)       [UIColor colorWithRed:((c&gt;&gt;16)&amp;0xFF)/255.0f green:((c&gt;&gt;8)&amp;0xFF)/255.0f blue:(c&amp;0xFF)/255.0f alpha:1.0f]</span></div><div class="line"><span class="comment">//背景色  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]  </span></div><div class="line"><span class="comment">//清除背景色  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CLEARCOLOR [UIColor clearColor] </span></div><div class="line"></div><div class="line"><span class="comment">//4.加载图片宏：</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOADIMAGE(file,type) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]</span></div><div class="line"><span class="comment">//5. NavBar高度</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NavigationBar_HEIGHT 44</span></div><div class="line"><span class="comment">//6. 获取系统版本</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CurrentSystemVersion [[UIDevice currentDevice] systemVersion]</span></div><div class="line"></div><div class="line"><span class="comment">//7. 判断是真机还是模拟器</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_IPHONE</span></div><div class="line">    <span class="comment">//iPhone Device</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_IPHONE_SIMULATOR</span></div><div class="line">   <span class="comment">//iPhone Simulator</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//8. 设置View的tag属性</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VIEWWITHTAG(_OBJECT, _TAG)    [_OBJECT viewWithTag : _TAG]</span></div><div class="line"></div><div class="line"><span class="comment">//9. GCD</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</span></div><div class="line"></div><div class="line"><span class="comment">//10. NSUserDefaults 实例化</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USER_DEFAULT [NSUserDefaults standardUserDefaults]</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/songrotek/article/details/8929963&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS开发高级:使用宏定义macros&lt;/a&gt;&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="OC" scheme="http://codingdoge.cn/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>STL常见用法 — queue</title>
    <link href="http://codingdoge.cn/2017/07/17/title:%20STL%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%20%E2%80%94%20queue/"/>
    <id>http://codingdoge.cn/2017/07/17/title: STL常见用法 — queue/</id>
    <published>2017-07-17T03:19:00.000Z</published>
    <updated>2018-01-14T17:04:46.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>代码敲得少，STL总是用的不熟，便自己整理一些用法，有眼缘的顺手用着吧。 </p></blockquote><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> 队列(queue)是一种特殊的线性表，是一种先进先出(First In First Out)的数据结构，允许在队列末尾插入元素，队列头取出元素，在STL中是用list或者deque实现，封闭头部即可。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Container</span> = <span class="title">deque</span>&lt;T&gt; &gt; <span class="title">class</span> <span class="title">queue</span>;</span></div></pre></td></tr></table></figure><p>队列适配器默认用deque容器实现，也可以指定使用list容器来实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span> &lt;Elem&gt; q;<span class="comment">// 创建一个空的queue，默认使用deque容器</span></div><div class="line"><span class="built_in">queue</span> &lt;Elem, <span class="built_in">list</span>&lt;Elem&gt; &gt; q;<span class="comment">// 使用list容器</span></div><div class="line"><span class="built_in">queue</span> &lt;Elem&gt; q1(q2);<span class="comment">// 复制q2</span></div></pre></td></tr></table></figure><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><table><thead><tr><th>成员函数</th><th>实现操作 </th></tr></thead><tbody><tr><td> Elem&amp; back()</td><td>返回队列最后一个元素 </td></tr><tr><td> bool empty()const</td><td>如果队列为空，返回true，否则返回false </td></tr><tr><td> Elem&amp; front()</td><td>返回队列第一个元素 </td></tr><tr><td> void pop()</td><td>移除队列中的第一个元素 </td></tr><tr><td> void push(const Elem&amp; e)</td><td>在队列末尾插入元素e </td></tr><tr><td> size_type size()const</td><td>返回队列中的元素数目 </td></tr></tbody></table><h2 id="用法演示"><a href="#用法演示" class="headerlink" title="用法演示"></a>用法演示</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;  </span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> n, m, size;  </div><div class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;<span class="comment">//定义队列q  </span></div><div class="line">  </div><div class="line">    q.push(<span class="number">1</span>);  </div><div class="line">    q.push(<span class="number">2</span>);<span class="comment">//将1 、2压入队列  </span></div><div class="line">  </div><div class="line">    <span class="keyword">while</span> (!q.empty())<span class="comment">//判断队列是否为空  </span></div><div class="line">    &#123;  </div><div class="line">        n = q.front();<span class="comment">//返回队列头部数据  </span></div><div class="line">        m = q.back();<span class="comment">//返回队列尾部数据  </span></div><div class="line">        size = q.size();<span class="comment">//返回队列里的数据个数  </span></div><div class="line">        q.pop();<span class="comment">//队列头部数据出队  </span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, n, m, size);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;代码敲得少，STL总是用的不熟，便自己整理一些用法，有眼缘的顺手用着吧。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;
      
    
    </summary>
    
      <category term="CPP" scheme="http://codingdoge.cn/categories/CPP/"/>
    
    
      <category term="STL" scheme="http://codingdoge.cn/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>插件管理——Vundle</title>
    <link href="http://codingdoge.cn/2017/07/17/title:%20%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94Vundle/"/>
    <id>http://codingdoge.cn/2017/07/17/title: 插件管理——Vundle/</id>
    <published>2017-07-17T03:18:00.000Z</published>
    <updated>2018-01-14T17:19:40.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>都说Vim是程序员写给自己的编辑器，其中的情结可想而知。</p></blockquote><p>vim因为其庞大而强劲的插件受到无比的推崇，而插件的查找和管理便成了一个问题。</p><p><a href="https://github.com/VundleVim/Vundle.vim#about" target="_blank" rel="noopener"><strong>Vundle</strong></a>便是一个<strong>Github</strong>上为了解决这个问题的项目(致敬贡献者们)，使用步骤如下：</p><h2 id="安装Vundle，在终端输入以下代码即可"><a href="#安装Vundle，在终端输入以下代码即可" class="headerlink" title="安装Vundle，在终端输入以下代码即可"></a>安装Vundle，在终端输入以下代码即可</h2><p><code>git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</code></p><blockquote><ul><li>~/.vim 来自哪?<br>在<strong>mac</strong>中<strong>Vim</strong>配置文件<strong><code>.vimrc</code></strong>在<code>/usr/share/vim/</code>下，一般是没有权限更改的,但是这个<code>.vimrc</code>是全局配置文件，我们只要更改用户配置文件即可</li><li>怎么查看<strong>/usr/</strong>?<ol><li><strong>显示隐藏文件</strong>，自行百度，终端中敲入代码即可。</li><li><strong>Finder</strong>下或者<strong>桌面</strong>上的Go，文件夹输入<code>/usr/</code>。<br><strong>mac</strong>下的Vim用户配置文件默认是没有的，需要我们自行创建<br>终端下输入<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> mkdir ~/.vim</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> touch ~/.vimrc</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>~/即为用户根目录。</p></blockquote></blockquote><h2 id="在Vim-Script选好插件"><a href="#在Vim-Script选好插件" class="headerlink" title="在Vim Script选好插件"></a>在<a href="http://vim-scripts.org/vim/scripts.html" target="_blank" rel="noopener">Vim Script</a>选好插件</h2><p>在<code>.vimrc</code>文件中加一句<code>Bundle plugin_name</code><br><code>.vimrc</code>示例:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> nocompatible    <span class="comment">" be iMproved</span></div><div class="line"><span class="keyword">filetype</span> off        <span class="comment">" required!</span></div><div class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/vundle/</div><div class="line"><span class="keyword">call</span> vundle#rc()</div><div class="line"><span class="comment">" let Vundle manage Vundle</span></div><div class="line"><span class="comment">" required!</span></div><div class="line">Bundle <span class="string">'gmarik/vundle'</span></div><div class="line"><span class="comment">" vim-scripts repos</span></div><div class="line">Bundle <span class="string">'vim-plugin-foo'</span></div><div class="line">Bundle <span class="string">'vim-plugin-bar'</span></div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required!</span></div></pre></td></tr></table></figure></p><h2 id="执行Vundle安装命令"><a href="#执行Vundle安装命令" class="headerlink" title="执行Vundle安装命令"></a>执行Vundle安装命令</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">:BundleInstall</span></div></pre></td></tr></table></figure><h2 id="Vundle的其它命令"><a href="#Vundle的其它命令" class="headerlink" title="Vundle的其它命令"></a>Vundle的其它命令</h2><table><thead><tr><th><code>:BundleList</code></th><th>列举出列表中(.vimrc中)配置的所有插件</th></tr></thead><tbody><tr><td><code>:BundleInstall</code></td><td>安装列表中全部插件</td></tr><tr><td><code>:BundleInstall!</code></td><td>更新列表中全部插件</td></tr><tr><td><code>:BundleSearch foo</code></td><td>查找foo插件</td></tr><tr><td><code>:BundleSearch! foo</code></td><td>刷新foo插件缓存</td></tr><tr><td><code>:BundleClean</code></td><td>清除列表中没有的插件</td></tr><tr><td><code>:BundleClean!</code></td><td>清除列表中没有的插件</td></tr></tbody></table><blockquote><p>参考<br><a href="http://beiyuu.com/git-vim-tutorial/" target="_blank" rel="noopener">Git时代的VIM不完全使用教程</a><br><a href="http://www.jianshu.com/p/062a47c365f1" target="_blank" rel="noopener">使用Vundle来管理vim的插件</a><br><a href="http://www.cnblogs.com/zhongcq/p/3642794.html#toc_1.15" target="_blank" rel="noopener">zhongcq 的VIM配置</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;都说Vim是程序员写给自己的编辑器，其中的情结可想而知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vim因为其庞大而强劲的插件受到无比的推崇，而插件的查找和管理便成了一个问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com
      
    
    </summary>
    
      <category term="Shell" scheme="http://codingdoge.cn/categories/Shell/"/>
    
    
      <category term="Tool" scheme="http://codingdoge.cn/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>漫谈iOS系列之：内存管理</title>
    <link href="http://codingdoge.cn/2017/07/17/title:%20%E6%BC%AB%E8%B0%88iOS%E7%B3%BB%E5%88%97%E4%B9%8B%EF%BC%9A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://codingdoge.cn/2017/07/17/title: 漫谈iOS系列之：内存管理/</id>
    <published>2017-07-17T03:18:00.000Z</published>
    <updated>2018-01-14T14:05:07.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p><a href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/" target="_blank" rel="noopener">推荐一篇来自@杨萧玉的引用计数原理Blog</a></p><hr><ul><li><strong>简介</strong><br>iOS中对内存管理的机制（堆内存），每一个对象都有一个与之关联的引用计数（Reference Counting）。当一个对象“被拥有”的时候引用计数+1，当一个对象引用计数为零时该对象被释放。  </li><li><strong>比拟</strong><br>比如上班，最早进入办公室的人需要开灯，之后进入办公室的人需要照明， 下班离开办公室的人不需要照明，最后离开办公室的人需要关灯。<br>这样对应的引用计数就是：第一个人进入办公室开灯，引用计数是1。之后进入办公室需要照明引用计数是2。下班一个人离开办公室引用计数变成了1，最后一个离开了办公室，引用计数变成了0 。  </li><li><strong>引用计数如何储存</strong><ol><li>TaggedPointer<br><a href="http://www.cocoachina.com/ios/20150918/13449.html" target="_blank" rel="noopener">一篇极好的文章</a><br>总体来说，我的理解是如果一个对象使用了<strong>Tagged Pointer</strong>技术（比如<em>NSString</em>，<em>NSNumber</em>等），指针里面会直接存数据内容，不会再作为“指针”指向其它地址，从Runtime来理解就是不会使用isa指针，也就不会继承苹果的内存管理方式（Reference Counting）。<br>判断当前对象是否在使用 TaggedPointer 是看标志位是否为1:  </li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_MSB_TAGGED_POINTERS</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> TAG_MASK (1ULL&lt;&lt;63)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> TAG_MASK 1</span></div><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> </div><div class="line">objc_object::isTaggedPointer() </div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_TAGGED_POINTERS</span></div><div class="line">    <span class="keyword">return</span> ((<span class="keyword">uintptr_t</span>)<span class="keyword">this</span> &amp; TAG_MASK);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>isa 指针<br>指针的内存空间很大，有时候可以优化指针，在指针中存储一部分内容。下面列出不同架构下的64位环境中<code>isa</code>指针结构:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">union</span> <span class="keyword">isa_t</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">isa_t</span>() &#123; &#125;</div><div class="line">    <span class="keyword">isa_t</span>(<span class="keyword">uintptr_t</span> value) : bits(value) &#123; &#125;</div><div class="line"></div><div class="line">    Class cls;</div><div class="line">    <span class="keyword">uintptr_t</span> bits;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SUPPORT_NONPOINTER_ISA</span></div><div class="line"><span class="meta"># <span class="meta-keyword">if</span> __arm64__</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00000001fffffff8ULL</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MAGIC_MASK  0x000003fe00000001ULL</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MAGIC_VALUE 0x000001a400000001ULL</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">        <span class="keyword">uintptr_t</span> indexed           : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> has_assoc         : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> has_cxx_dtor      : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> shiftcls          : <span class="number">30</span>; <span class="comment">// MACH_VM_MAX_ADDRESS 0x1a0000000</span></div><div class="line">        <span class="keyword">uintptr_t</span> magic             : <span class="number">9</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> weakly_referenced : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> deallocating      : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> has_sidetable_rc  : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> extra_rc          : <span class="number">19</span>;</div><div class="line"><span class="meta">#       <span class="meta-keyword">define</span> RC_ONE   (1ULL&lt;&lt;45)</span></div><div class="line"><span class="meta">#       <span class="meta-keyword">define</span> RC_HALF  (1ULL&lt;&lt;18)</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="meta"># <span class="meta-keyword">elif</span> __x86_64__</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MASK        0x00007ffffffffff8ULL</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MAGIC_MASK  0x0000000000000001ULL</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">define</span> ISA_MAGIC_VALUE 0x0000000000000001ULL</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">        <span class="keyword">uintptr_t</span> indexed           : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> has_assoc         : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> has_cxx_dtor      : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> shiftcls          : <span class="number">44</span>; <span class="comment">// MACH_VM_MAX_ADDRESS 0x7fffffe00000</span></div><div class="line">        <span class="keyword">uintptr_t</span> weakly_referenced : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> deallocating      : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> has_sidetable_rc  : <span class="number">1</span>;</div><div class="line">        <span class="keyword">uintptr_t</span> extra_rc          : <span class="number">14</span>;</div><div class="line"><span class="meta">#       <span class="meta-keyword">define</span> RC_ONE   (1ULL&lt;&lt;50)</span></div><div class="line"><span class="meta">#       <span class="meta-keyword">define</span> RC_HALF  (1ULL&lt;&lt;13)</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="meta"># <span class="meta-keyword">else</span></span></div><div class="line">    <span class="comment">// Available bits in isa field are architecture-specific.</span></div><div class="line"><span class="meta">#   <span class="meta-keyword">error</span> unknown architecture</span></div><div class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// SUPPORT_NONPOINTER_ISA</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>只有<strong>arm64</strong>架构的设备支持优化，下面列出了<code>isa</code>指针中变量对应的含义: </p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>indexed</td><td>0 表示普通的<code>isa</code>指针，1 表示使用优化，存储引用计数</td></tr><tr><td>has_assoc</td><td>表示该对象是否包含 associated object，如果没有，则析构时会更快</td></tr><tr><td>has_cxx_dtor</td><td>表示该对象是否有 C++ 或 ARC 的析构函数，如果没有，则析构时更快</td></tr><tr><td>shiftcls</td><td>类的指针</td></tr><tr><td>magic</td><td>固定值为 0xd2，用于在调试时分辨对象是否未完成初始化</td></tr><tr><td>weakly_referenced</td><td>表示该对象是否有过<code>weak</code>对象，如果没有，则析构时更快</td></tr><tr><td>deallocating</td><td>表示该对象是否正在析构</td></tr><tr><td>has_sidetable_rc</td><td>表示该对象的引用计数值是否过大无法存储在<code>isa</code>指针</td></tr><tr><td>extra_rc</td><td>存储引用计数值减一后的结果</td></tr></tbody></table><ol><li>散列表<br>散列表来存储引用计数具体是用DenseMap类来实现，实现中有锁保证其安全性。</li></ol><ul><li>获取引用计数<br>在MRC环境下可以使用<code>retainCount</code>方法获取某个对象的引用计数。<br>在ARC环境下可以使用Core Foundation 库的<code>CFGetRetainCount((__bridge CFTypeRef)(obj))</code>方法和Runtime的<code>_objc_rootRetainCount()</code>方法来获取引用计数，也可以使用KVC技术来获取<code>valueForKey:@&quot;retainCount&quot;</code>。注意以上方法不是线程安全的。</li><li>注意<br>NSString 定义的对象是保存在字符串常量区，没有用引用计数管理内存，如果输出其<code>retainCount</code>，为-1。  <blockquote><p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-a0c222416dbc63a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="retainCount" title="">                </div>                <div class="image-caption">retainCount</div>            </figure> 注意其中的<strong>Do not use this method</strong>。   </p></blockquote></li></ul><h2 id="MRC-Manual-Reference-Counting"><a href="#MRC-Manual-Reference-Counting" class="headerlink" title="MRC(Manual Reference Counting)"></a>MRC(Manual Reference Counting)</h2><hr><p>MRC从字面上理解就是手动管理引用计数，也就是手动管理内存。相关的内存管理方法有<code>retain</code>，<code>release</code>，<code>autorelease</code>，其中<code>retain</code>方法是对引用计数+1，相应的<code>release</code>是对引用计数-1，<code>autorelease</code>是将对象加入自动释放池，下文会讲到。</p><ul><li><p>示例代码</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 以预定<span class="keyword">Person</span>类为例</div><div class="line"><span class="keyword">Person</span>* <span class="keyword">person</span> = <span class="comment">[<span class="comment">[Person alloc]</span> init]</span>;    // 申请对象，此时引用计数=1</div><div class="line"><span class="comment">[person retain]</span>;  //此时引用记数+1，现为2</div><div class="line"><span class="comment">[person release]</span>;   //引用计数-1，此时引用计数=1</div><div class="line"><span class="comment">[person release]</span>;   //引用计数-1，此时引用计数=0，内存被释放</div><div class="line"><span class="comment">[person autorelease]</span>;  // 将对象加入自动释放池</div><div class="line"><span class="keyword">Person</span> *<span class="keyword">person</span> = <span class="comment">[<span class="comment">[<span class="comment">[Person alloc]</span> init]</span> autorelease]</span>; // 也可以在创建对象时将其加入自动释放池</div></pre></td></tr></table></figure></li></ul><p>按道理来说创建一个对象，然后<code>release</code>后该对象引用计数为零，但是实际情况中并不会出现这种现象，<code>release</code>后再输出其引用计数还是为1，在我的理解中有两种可能：</p><ol><li>该对象在引用计数为1的时候进行<code>release</code>后，对象已经被释放，此时再调用<code>retainCount</code>毫无意义，因为该对象已经不存在了，为了防止某些错误保护这个<code>retainCount</code>方法所以编译器不会报错，但是输出值为释放前的值；</li><li>编译器为我们做了各种优化，也许是记录<code>retainCount</code>为零消耗过大或者没有意义。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-c23186f1a9b761f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重写了`dealloc`方便查看对象是否被释放" title="">                </div>                <div class="image-caption">重写了`dealloc`方便查看对象是否被释放</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-85f2e1aadd64812e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出其`retainCount`然后释放" title="">                </div>                <div class="image-caption">输出其`retainCount`然后释放</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-386dbf919566a2b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以看到并不会出现引用计数为零的情况，但是该对象确实被释放了" title="">                </div>                <div class="image-caption">可以看到并不会出现引用计数为零的情况，但是该对象确实被释放了</div>            </figure></li></ol><blockquote><p><strong>小知识:</strong><br><strong>指针错误</strong>：访问了一块坏的内存（已经被回收的，不可用的内存）。<br><strong>僵尸对象</strong>：所占内存已经被回收的对象，僵尸对象不能再被使用。（打开僵尸对象检测）<br><strong>空指针</strong>：没有指向任何东西的指针（存储的东西是<code>0</code>, <code>null</code>, <code>nil</code>），给空指针发送消息不会报错。<br><strong>注意</strong>：不能使用<code>[p retaion]</code>让僵尸对象起死复生。</p></blockquote><p>在MRC管理时代有一个黄金法则：</p><ol><li>谁创建谁负责。如果你通过alloc,new,copy来创建了一个对象，那么你就必须调用release或者autorelease方法；</li><li>谁retain，谁release。只要你调用了retain，无论这个对象时如何生成的，你都要调用release；</li></ol><h2 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h2><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>前段编译器会为“拥有的”每一个对象加入相应的<code>release</code>语句，如果对象的所有权修饰符是<code>__strong</code>，那么它就是被拥有的。如果再某个方法内创建了一个对象，前端编译器会在方法末尾自动插入<code>release</code>语句已销毁它。而类拥有的对象（实例变量/属性）会在<code>dealloc</code>方法内被释放。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-087aa0f74748d421.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译器所为" title="">                </div>                <div class="image-caption">编译器所为</div>            </figure></p><h4 id="编译器为我们做的，我们可以手动完成达到优化"><a href="#编译器为我们做的，我们可以手动完成达到优化" class="headerlink" title="编译器为我们做的，我们可以手动完成达到优化"></a>编译器为我们做的，我们可以手动完成达到优化</h4><p>比如：<br><code>__autoreleasing</code>在ARC中主要用在参数传递返回值（out-parameters）和引用传递参数（pass-by-reference）的情况下，有这种指针（<code>NSError **</code>）的函数参数如果不加修饰符，编译器会默认将他们认定为<code>__autoreleasing</code>类型。<br>比如常用的<code>NSError</code>的使用：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSError *__autoreleasing <span class="keyword">error</span>;</div><div class="line"><span class="keyword">if</span> (![data writeToFile:<span class="keyword">filename</span> options:NSDataWritingAtomic <span class="keyword">error</span>:&amp;<span class="keyword">error</span>])</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"Error: %@"</span>, <span class="keyword">error</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你把<code>error</code>定义为了<code>strong</code>型，编译器会隐式地做如下事情，保证最终传入函数的参数依然是个<code>__autoreleasing</code>类型的引用。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSError *<span class="keyword">error</span>;</div><div class="line">NSError *__autoreleasing tempError = <span class="keyword">error</span>; <span class="comment">// 编译器添加</span></div><div class="line"><span class="keyword">if</span> (![data writeToFile:filename options:NSDataWritingAtomic <span class="keyword">error</span>:&amp;tempError])</div><div class="line">&#123;</div><div class="line">    <span class="keyword">error</span> = tempError; <span class="comment">// 编译器添加</span></div><div class="line">    NSLog(@<span class="string">"Error :%@"</span>, <span class="keyword">error</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以为了提高效率，避免这种情况，我们一般在定义<code>error</code>的时候将其老老实实地声明为<code>__autoreleasing</code>类型。</p><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><hr><p>平常我们容易造成循环引用的三种情况：</p><ol><li><strong><code>NSTimer</code></strong><br> 先看<code>NSTimer</code>使用的代码:</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">1.0</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(runTimer) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>YES];</div></pre></td></tr></table></figure><p>其中<code>_timer</code>是实例变量被<code>self</code>保留，<code>_timer</code>的target是<code>self</code>，<code>self</code>被<code>_timer</code>保留，引发循环引用。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-0e9a0b344f927e34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="循环引用" title="">                </div>                <div class="image-caption">循环引用</div>            </figure><br>解除方法就是使target中的对象不是<code>viewController</code>从而断开引用，iOS10之前我们可以写个类别重新封装target来实现，iOS10之后系统给了新方法：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSTimer</span> *)scheduledTimerWithTimeInterval:(<span class="built_in">NSTimeInterval</span>)interval repeats:(<span class="built_in">BOOL</span>)repeats block:(<span class="keyword">void</span> (^)(<span class="built_in">NSTimer</span> *timer))block;</div></pre></td></tr></table></figure><ul><li>不再需要target，而是传入一个block，在block里面进行循环调用方法</li><li>关于block怎么解决循环引用请看下面</li></ul><ol><li><strong>block</strong><blockquote><p>简介<br>block和其他语言的闭包或lambda表达式是一回事,block的使用很像函数指针，不过与函数最大的不同是：block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，block不仅实现函数的功能，还能携带函数的执行环境。</p></blockquote></li></ol><p><strong>block基本语法</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明一个block变量</span></div><div class="line"><span class="keyword">long</span> (^<span class="keyword">sum</span>) (<span class="keyword">int</span>, <span class="keyword">int</span>) = nil;</div><div class="line"><span class="comment">// sum是个block变量，该block类型有两个int型参数，返回类型是long。</span></div><div class="line"><span class="comment">// 定义block并赋给变量sum</span></div><div class="line"><span class="keyword">sum</span> = ^ <span class="keyword">long</span> (<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 调用block：</span></div><div class="line"><span class="keyword">long</span> s = <span class="keyword">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure><p>定义一个实例函数，该函数返回block：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">long</span> (^)(<span class="keyword">int</span>, <span class="keyword">int</span>)) sumBlock &#123;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">base</span> = <span class="number">100</span>;</div><div class="line">    <span class="keyword">return</span> [[ ^ <span class="keyword">long</span> (<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">base</span> + a + b;</div><div class="line">    &#125; copy] autorelease];</div><div class="line">  &#125;</div><div class="line"><span class="comment">// 调用block</span></div><div class="line">[<span class="meta">self sumBlock</span>](<span class="number">1</span>,<span class="number">2</span>);</div></pre></td></tr></table></figure><p>根据在内存中的位置将block分为三种类型：</p><pre><code>* `NSGlobalBlock`: 类似函数，位于text段；* `NSStackBlock`: 位于栈内存，函数返回后block将无效；* `NSMallocBlock`: 位于堆内存。</code></pre><p>block其实包含两个部分内容：</p><ol><li>block执行的代码，这是在编译的时候已经生成好的；</li><li>一个包含block执行时需要的所有外部变量值的数据结构。 block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-cc743eb4f46bc26b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="block的数据结构" title="">                </div>                <div class="image-caption">block的数据结构</div>            </figure></li></ol><p>对于 block 外的变量引用，block 默认是将其复制到其数据结构中来实现访问的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-2b3a94efc4a64b1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="传入外部变量" title="">                </div>                <div class="image-caption">传入外部变量</div>            </figure><br>对于用 <code>__block</code> 修饰的外部变量引用，block 是复制其引用地址来实现访问的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-6d48edcdc97d0af2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用__block修饰" title="">                </div>                <div class="image-caption">用__block修饰</div>            </figure></p><p>初步了解了block后看看它怎么构成循环引用并怎么解决的吧</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^block)();</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) block myBlock;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *blockString;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)testBlock &#123;</div><div class="line">    <span class="keyword">self</span>.myBlock = ^() &#123;</div><div class="line">        <span class="comment">//其实注释中的代码，同样会造成循环引用</span></div><div class="line">        <span class="built_in">NSString</span> *localString = <span class="keyword">self</span>.blockString;</div><div class="line">          <span class="comment">//NSString *localString = _blockString;</span></div><div class="line">          <span class="comment">//[self doSomething];</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看了前面关于block的一些介绍应该容易看出来，当我们往block中传入数据时是保存在了block的堆中，如上述代码中引用了<code>self</code>相当于对<code>self</code>进行了一次<code>retain</code>，而<code>self</code>本身持有<code>block</code>于是造成了循环引用，同时在block中<code>release``self</code>没有用，因为在block中操作作用范围仅仅来block的函数栈，影响不到堆中的<code>self</code>，解决方法如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line"><span class="keyword">self</span>.myBlock = ^()&#123;</div><div class="line">    __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) = strongSelf;</div><div class="line">    <span class="built_in">NSString</span> *localString = strongSelf;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中传入一个若引用就不会造成循环引用，然后在block的函数栈中用一个强指针来接受传进来的弱指针，防止弱指针被提前释放产生野指针。</p><blockquote><p>参考文章：<br>Cooper – <a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="noopener">正确使用Block避免Cycle Retain和Crash</a><br>唐巧 – <a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="noopener">谈Objective-C block的实现</a><br>Dev Talking – <a href="http://www.cocoachina.com/ios/20150109/10891.html" target="_blank" rel="noopener">Objective-C中的Block</a></p></blockquote><ol><li><strong>delegate</strong><br>我们对代理的写法一般都是：<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;TestDelegate&gt; delegate;</div></pre></td></tr></table></figure></li></ol><p>如果使用<code>strong</code>的话很明显会造成循环引用（<code>delegate</code>调用<code>self</code>的一些东西），今天被面试官问道如果使用<code>delegate</code>出现了循环引用怎么解决，我说用weak，他说换一个，然后就懵住了，只回答了思路，找到互相引用的对象(可以用Instruments)然后断开引用。</p><h2 id="Autorelease"><a href="#Autorelease" class="headerlink" title="Autorelease"></a>Autorelease</h2><ul><li>简介<br>很好理解，字面意思上看就是自动释放，我们可以通过使用autorelease让编译器帮我们在某个时刻自动释放内存。在MRC时我们使用NSAutorelease类来使用自动释放机制，代码如下：</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSAutoreleasePool</span> pool = [[<span class="built_in">NSAutoreleasePool</span> alloc] init];</div><div class="line"><span class="comment">// Code benefitting from a local autorelease pool.</span></div><div class="line">[pool release];</div></pre></td></tr></table></figure><p>也可以直接使用<code>[obj autorelease]</code>。<br>现在基本上都是ARC环境，这个时候我们使用的是<code>autoreleasepool</code>（自动释放池），比如常见的：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iOS program</span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Command line program</span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>它的作用是把我们在<code>{}</code>中申请的对象在事件处理完时自动释放掉，其中的原理推荐阅读<strong>Qi Tang</strong>的<a href="http://itangqi.me/2016/04/15/autorelease-pool-in-ios/" target="_blank" rel="noopener">iOS 中的 Autorelease Pool</a>。<br>前面说到的事件处理完时其实就是一次<code>runloop</code>结束时。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/2590408-efe8d04b74c7faf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="runloop和autorelease" title="">                </div>                <div class="image-caption">runloop和autorelease</div>            </figure></p><blockquote><p>程序运行 -&gt; 开启事件循环 -&gt; 发生触摸事件 -&gt; 创建自动释放池 -&gt; 处理触摸事件 -&gt; 事件对象加入自动释放池 -&gt; 一次事件循环结束, 销毁自动释放池</p></blockquote><ul><li><p>什么时候用<code>@autoreleasepool</code></p><ol><li>写基于命令行的的程序时，就是没有UI框架，如AppKit等Cocoa框架时。</li></ol><ul><li>写循环，循环里面包含了大量临时创建的对象。（本文的例子）</li><li>创建了新的线程。（非Cocoa程序创建线程时才需要）</li><li>长时间在后台运行的任务。</li></ul></li><li><p>利用<code>@autoreleasepool</code>优化循环<br>当我们一个循环内创建了很多临时对象时，可以通过使用<code>@autoreleasepool</code>在每次循环结束时释放内存：</p></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//来自Apple文档，见参考</span></div><div class="line"><span class="built_in">NSArray</span> *urls = &lt;<span class="meta"># An array of file URLs #&gt;;</span></div><div class="line"><span class="keyword">for</span> (<span class="built_in">NSURL</span> *url <span class="keyword">in</span> urls) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="built_in">NSError</span> *error;</div><div class="line">        <span class="built_in">NSString</span> *fileContents = [<span class="built_in">NSString</span> stringWithContentsOfURL:url</div><div class="line">                                        encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">        <span class="comment">/* Process the string, creating and autoreleasing more objects. */</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>参考文章：<br>sunnyxx —— <a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="noopener">黑幕背后的Autorelease</a><br>Jerry4me —— <a href="http://www.jianshu.com/p/5559bc15490d" target="_blank" rel="noopener">iOS中autorelease的那些事儿</a><br>tutuge —— <a href="http://tutuge.me/2015/03/17/what-is-autoreleasepool/" target="_blank" rel="noopener">@autoreleasepool-内存的分配与释放</a></p></blockquote><h2 id="修饰词"><a href="#修饰词" class="headerlink" title="修饰词"></a>修饰词</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用计数&quot;&gt;&lt;a href=&quot;#引用计数&quot; class=&quot;headerlink&quot; title=&quot;引用计数&quot;&gt;&lt;/a&gt;引用计数&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2015/12/06/The-Principl
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://codingdoge.cn/tags/Swift/"/>
    
      <category term="OC" scheme="http://codingdoge.cn/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>漫谈iOS系列之：多线程</title>
    <link href="http://codingdoge.cn/2017/07/17/title:%20%E6%BC%AB%E8%B0%88iOS%E7%B3%BB%E5%88%97%E4%B9%8B%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://codingdoge.cn/2017/07/17/title: 漫谈iOS系列之：多线程/</id>
    <published>2017-07-17T03:17:00.000Z</published>
    <updated>2018-01-13T05:08:06.362Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="线程基本概念"><a href="#线程基本概念" class="headerlink" title="线程基本概念"></a>线程基本概念</h1><p>线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。<br>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。<br><strong>线程的状态</strong>：</p><ul><li>新生态（New Thread）</li><li>可运行态（Runnable）</li><li>阻塞/非运行态（Not Runnable）</li><li>死亡态（Dead）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ooo.0o0.ooo/2017/05/14/5917f384972b9.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>死锁</strong>：<br>是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。</p><p><strong>死锁条件</strong>：</p><ol><li>互斥条件：所谓互斥就是进程在某一时间内独占资源。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:进程已获得资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h1 id="创建线程的开销"><a href="#创建线程的开销" class="headerlink" title="创建线程的开销"></a>创建线程的开销</h1><p><a href="http://www.cnblogs.com/ktgu/p/3529144.html" target="_blank" rel="noopener">多线程的代价及上下文切换</a></p><h1 id="pThread"><a href="#pThread" class="headerlink" title="pThread"></a>pThread</h1><p>POSIX线程（POSIX Threads，常被缩写为Pthreads）是POSIX的线程标准，跨平台，适用于多种操作系统（类Unix操作系统中，都使用Pthreads作为操作系统的线程，Windows操作系统也有其移植版pthreads-win32），可移植性强，是一套纯C语言的通用API，且线程的生命周期需要程序员自己管理，使用难度较大，所以在实际开发中通常不使用。<br>Pthreads API中大致共有100个函数调用，全都以”pthread_”开头，并可以分为四类：</p><ul><li>线程管理，例如创建线程，等待(join)线程，查询线程状态等。</li><li>互斥锁（Mutex）：创建、摧毁、锁定、解锁、设置属性等操作。</li><li>条件变量（Condition Variable）：创建、摧毁、等待、通知、设置与查询属性等操作。</li><li>使用了互斥锁的线程间的同步管理。</li></ul><p><code>pThread</code>在实际开发中基本不使用，所以大概了解下就好了。</p><h1 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h1><h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><h2 id="dispatch-barrier-async-amp-dispatch-barrier-sync"><a href="#dispatch-barrier-async-amp-dispatch-barrier-sync" class="headerlink" title="dispatch_barrier_async&amp;dispatch_barrier_sync"></a>dispatch_barrier_async&amp;dispatch_barrier_sync</h2><p>在队列中，<code>barrier</code>块必须单独执行，不能与其他<code>block</code>并行。这只对并发队列有意义，并发队列如果发现接下来要执行的<code>block</code>是个<code>barrier block</code>，那么就一直要等到当前所有并发的<code>block</code>都执行完毕，才会单独执行这个<code>barrier block</code>代码块，等到这个<code>barrier block</code>执行完毕，再继续正常处理其他并发<code>block</code>。</p><blockquote><p><code>async</code>, <code>sync</code>两者区别在于<code>async</code>将自己的任务插入队列后, 不用等待自己的任务结束, 继续把后面的任务插入队列, 然后等待自己的任务运行结束才执行后面的任务, <code>sync</code>将自己的任务插入队列后，需要等待自己的任务运行结束才能将后面的任务插入队列。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@end</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *_name;</div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_queue_t</span> _concurrentQueue;</div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">       _concurrentQueue = dispatch_queue_create(<span class="string">"com.person.syncQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    dispatch_barrier_async(_concurrentQueue, ^&#123;</div><div class="line">        _name = [name <span class="keyword">copy</span>];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    __block <span class="built_in">NSString</span> *tempName;</div><div class="line">    <span class="built_in">dispatch_sync</span>(_concurrentQueue, ^&#123;</div><div class="line">        tempName = _name;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> tempName;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><h1 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h1><p><code>NSOperation</code>默认是非并发的，当你调用<code>-[NSOperation start]</code>方法时，该方法会等任务结束才会返回；<br>并发的<code>NSOperation</code>是指,当你调用<code>-[NSOperation start]</code>后，<code>NSOperation</code>会在非当前线程(建立一个<code>NSThread</code>，或是<code>dispatch async</code>等)执行任务，并在任务结束之前就返回;</p><p>需要注意的是，并发行为都需要你自己实现，若要实现并发，你需要做很多额外的工作：</p><ol><li>你需要创建一个<code>subclass</code>；</li><li>除了重载<code>main</code>方法，实现并发你还需要至少重载；<code>start</code>,<code>isConcurrent</code>,<code>isExecuting</code>,<code>isFinished</code>四个方法；</li><li>在<code>start</code>里，创建<code>Thread</code>或者调用一个异步函数；</li><li>更新<code>isExecuting</code>，并且发送相应KVO消息；</li><li>任务结束后，你还得更新<code>isExecuting</code>和<code>isFinished</code>，发送相应KVO消息。<br>实现一个并发的<code>NSOperation</code>比较少见，具体如何实现，可以读读文档: <a href="https://developer.apple.com/documentation/foundation/operation#//apple_ref/doc/uid/TP40004591-RH2-1173" target="_blank" rel="noopener">NSOperation Class Reference</a></li></ol><p>大多数情况下<code>NSOperation</code>都设计成非并发，这样实现起来会简单很多;<br>并且，一般会配合<code>NSOperationQueue</code>使用，由<code>NSOperationQueue</code>来负责执行<code>NSOperation</code>，而非直接调用<code>-[NSOperation start]</code>。</p><p>若有复杂任务需要并发执行，一般也是拆成多个<code>NSOperation</code>，由<code>NSOperationQueue</code>来并发的执行多个<code>NSOperation</code>。</p><blockquote><p>参考:<br><a href="http://www.jianshu.com/p/0b0d9b1f1f19" target="_blank" rel="noopener">关于iOS多线程，你看我就够了</a><br> <a href="http://www.jianshu.com/p/9ed95082f256" target="_blank" rel="noopener">dispatch_barrier_sync和dispatch_barrier_async</a><br><a href="http://www.cnblogs.com/ziyi--caolu/p/4900650.html" target="_blank" rel="noopener">iOS开发：深入理解GCD 第二篇（dispatch_group、dispatch_barrier、基于线程安全的多读单写）</a><br><a href="http://ourcoders.com/thread/show/1067/" target="_blank" rel="noopener">NSOperation的并发和非并发有什么区别呀？</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;线程基本概念&quot;&gt;&lt;a href=&quot;#线程基本概念&quot; class=&quot;headerlink&quot; title=&quot;线程基本概念&quot;&gt;&lt;/a&gt;线程基本概念&lt;/h1&gt;&lt;p&gt;线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单
      
    
    </summary>
    
      <category term="iOS" scheme="http://codingdoge.cn/categories/iOS/"/>
    
    
      <category term="OC" scheme="http://codingdoge.cn/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer —— 复杂链表的复制</title>
    <link href="http://codingdoge.cn/2017/07/06/title:%20%E5%89%91%E6%8C%87Offer%20%E2%80%94%E2%80%94%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>http://codingdoge.cn/2017/07/06/title: 剑指Offer —— 复杂链表的复制/</id>
    <published>2017-07-06T02:44:00.000Z</published>
    <updated>2018-01-14T17:25:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源牛客网：<strong><a href="https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&amp;tqId=11178&amp;tPage=2&amp;rp=2&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">复杂链表的复制</a></strong></p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">struct RandomListNode &#123;</div><div class="line">    int label;</div><div class="line">    struct RandomListNode *next, *random;</div><div class="line">    RandomListNode(int x) :</div><div class="line">            label(x), next(NULL), random(NULL) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">*/</div><div class="line"><span class="selector-tag">class</span> <span class="selector-tag">Solution</span> &#123;</div><div class="line"><span class="attribute">public</span>:</div><div class="line">    RandomListNode* <span class="built_in">Clone</span>(RandomListNode* pHead) &#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="一、递归思想：把大问题转化若干子问题"><a href="#一、递归思想：把大问题转化若干子问题" class="headerlink" title="一、递归思想：把大问题转化若干子问题"></a>一、递归思想：把大问题转化若干子问题</h3><p>此题转化为一个头结点和除去头结点剩余部分，剩余部分操作和原问题一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RandomListNode* <span class="keyword">Clone</span>(RandomListNode* pHead)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(pHead==<span class="keyword">NULL</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">         </div><div class="line">        <span class="comment">//开辟一个新节点</span></div><div class="line">        RandomListNode* pClonedHead=<span class="keyword">new</span> RandomListNode(pHead-&gt;label);</div><div class="line">        pClonedHead-&gt;next = pHead-&gt;next;</div><div class="line">        pClonedHead-&gt;random = pHead-&gt;random;</div><div class="line">         </div><div class="line">        <span class="comment">//递归其他节点</span></div><div class="line">        pClonedHead-&gt;next=<span class="keyword">Clone</span>(pHead-&gt;next);</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> pClonedHead;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><ul><li>复制每个节点，如：复制节点A得到A1，将A1插入节点A后面</li><li>遍历链表，A1-&gt;random = A-&gt;random-&gt;next;</li><li>将链表拆分成原链表和复制后的链表</li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">RandomListNode* Clone(RandomListNode* pHead)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!pHead) return NULL;</div><div class="line">    RandomListNode *currNode = pHead;</div><div class="line">    <span class="keyword">while</span>(currNode)&#123;</div><div class="line">        R<span class="function"><span class="title">andomListNode</span> *node = new RandomListNode(currNode-&gt;</span>label);</div><div class="line">        <span class="function"><span class="title">node</span>-&gt;</span><span class="function"><span class="title">next</span> = currNode-&gt;</span>next;</div><div class="line">        <span class="function"><span class="title">currNode</span>-&gt;</span>next = node;</div><div class="line">        <span class="function"><span class="title">currNode</span> = node-&gt;</span>next;</div><div class="line">    &#125;</div><div class="line">    currNode = pHead;</div><div class="line">    <span class="keyword">while</span>(currNode)&#123;</div><div class="line">        R<span class="function"><span class="title">andomListNode</span> *node = currNode-&gt;</span>next;</div><div class="line">        <span class="function"><span class="title">if</span>(currNode-&gt;</span>random)&#123;                </div><div class="line">            <span class="function"><span class="title">node</span>-&gt;</span><span class="function"><span class="title">random</span> = currNode-&gt;</span><span class="function"><span class="title">random</span>-&gt;</span>next;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="title">currNode</span> = node-&gt;</span>next;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拆分</span></div><div class="line">    R<span class="function"><span class="title">andomListNode</span> *pCloneHead = pHead-&gt;</span>next;</div><div class="line">    RandomListNode *tmp;</div><div class="line">    currNode = pHead;</div><div class="line">    <span class="function"><span class="title">while</span>(currNode-&gt;</span>next)&#123;</div><div class="line">        <span class="function"><span class="title">tmp</span> = currNode-&gt;</span>next;</div><div class="line">        <span class="function"><span class="title">currNode</span>-&gt;</span><span class="function"><span class="title">next</span> =tmp-&gt;</span>next;</div><div class="line">         currNode = tmp;</div><div class="line">    &#125;</div><div class="line">    return pCloneHead;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="三、哈希表法"><a href="#三、哈希表法" class="headerlink" title="三、哈希表法"></a>三、哈希表法</h3><p>时间空间复杂度都是O(n)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">RandomListNode* <span class="keyword">Clone</span>(RandomListNode* pHead)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pHead==<span class="keyword">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">         </div><div class="line">    <span class="comment">//定义一个哈希表</span></div><div class="line">    unordered_multimap&lt;RandomListNode*,RandomListNode*&gt; table;</div><div class="line">         </div><div class="line">    <span class="comment">// 开辟一个头结点</span></div><div class="line">    RandomListNode* pClonedHead=<span class="keyword">new</span> RandomListNode(pHead-&gt;label);</div><div class="line">    pClonedHead-&gt;next=<span class="keyword">NULL</span>;</div><div class="line">    pClonedHead-&gt;random=<span class="keyword">NULL</span>;</div><div class="line">         </div><div class="line">    <span class="comment">// 将头结点放入map中</span></div><div class="line">    table.insert(make_pair(pHead,pClonedHead));</div><div class="line">         </div><div class="line">    <span class="comment">//设置操作指针</span></div><div class="line">    RandomListNode* pNode=pHead-&gt;next;</div><div class="line">    RandomListNode* pClonedNode=pClonedHead;</div><div class="line">         </div><div class="line">    <span class="comment">// 第一遍先将简单链表复制一下</span></div><div class="line">    <span class="keyword">while</span>(pNode!=<span class="keyword">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 不断开辟pNode的拷贝结点</span></div><div class="line">        RandomListNode* pClonedTail=<span class="keyword">new</span> RandomListNode(pNode-&gt;label);</div><div class="line">        pClonedTail-&gt;next=<span class="keyword">NULL</span>;</div><div class="line">        pClonedTail-&gt;random=<span class="keyword">NULL</span>;</div><div class="line">             </div><div class="line">        <span class="comment">//连接新节点，更新当前节点</span></div><div class="line">        pClonedNode-&gt;next=pClonedTail;</div><div class="line">        pClonedNode=pClonedTail;</div><div class="line">             </div><div class="line">        <span class="comment">//将对应关系  插入到哈希表中</span></div><div class="line">        table.insert(make_pair(pNode,pClonedTail));</div><div class="line">             </div><div class="line">        <span class="comment">//向后移动操作节点</span></div><div class="line">        pNode=pNode-&gt;next;</div><div class="line">    &#125;</div><div class="line">         </div><div class="line">    <span class="comment">//需从头开始设置random节点，设置操作指针</span></div><div class="line">    pNode=pHead;</div><div class="line">    pClonedNode=pClonedHead;</div><div class="line">         </div><div class="line">    <span class="comment">// 根据map中保存的数据，找到对应的节点</span></div><div class="line">    <span class="keyword">while</span>(pNode!=<span class="keyword">NULL</span>)</div><div class="line">    &#123;</div><div class="line">             </div><div class="line">        <span class="keyword">if</span>(pNode-&gt;random!=<span class="keyword">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//找到对应节点，更新复制链表</span></div><div class="line">            pClonedNode-&gt;random=table.find(pNode-&gt;random)-&gt;second;</div><div class="line">        &#125;</div><div class="line">             </div><div class="line">        <span class="comment">//向后移动操作节点</span></div><div class="line">        pNode=pNode-&gt;next;</div><div class="line">        pClonedNode=pClonedNode-&gt;next;</div><div class="line">    &#125;</div><div class="line">         </div><div class="line">    <span class="keyword">return</span> pClonedHead;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目来源牛客网：&lt;strong&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&amp;amp;tqId=11178&amp;amp;tPage
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
      <category term="剑指Offer" scheme="http://codingdoge.cn/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>动态规划（Dynamic Programming）</title>
    <link href="http://codingdoge.cn/2017/05/13/title:%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88Dynamic%20Programming%EF%BC%89/"/>
    <id>http://codingdoge.cn/2017/05/13/title: 动态规划（Dynamic Programming）/</id>
    <published>2017-05-13T11:39:00.000Z</published>
    <updated>2018-01-12T14:27:10.181Z</updated>
    
    <content type="html"><![CDATA[<p>（以下简称DP）</p><hr><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。适合用DP求解的问题，经分解得到的子问题一般不是相互独立的，如果使用分治法求解，有些子问题会被重复计算多次，可以用一个表来记录所有已解决的子问题的答案，不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。</p><p>DP算法适用于解最优化问题。通常可以按以下步骤设计：</p><ol><li>找出最优解的性质，并刻画其结构特征；</li><li>递归地定义最优值；</li><li>以自底向上的方式计算出最优值；</li><li>根据计算最优值时得到的信息，构造最优解</li></ol><hr><h2 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h2><ol><li><p>最优子结构<br>问题的最优解包含了其子问题的最优解。</p></li><li><p>重叠子问题<br>在用递归算法自顶向下求解问题时，每次产生的子问题并不总是新问题，有些子问题被计算多次。DP算法正式利用了这种子问题的重叠性质，对每一个子问题只解一次，而后将其解保存在一个表格中，当再次需要解此问题时，只是简单地用常数时间查看一下结果。通常不同的子问题个数随问题的大小呈多项式增长，因此用DP算法通常只需要多项式时间，从而获得较高的解题效率。</p></li></ol><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一个给定序列的子序列是在该序列中删去若干元素后得到的序列。确切的说，若给定序列<code>X = {x1, x2, ..., xm}</code>，则另一序列<code>Z = {z1, z2, ..., zk}</code>，X的子序列是指存在一个严格递增下标序列<code>{i1, i2, ..., ik}</code>使得对于所有<code>j = 1, 2, ..., k</code>有<code>zj = xij</code>。例如，序列<code>Z = {B, C, D, B}</code>是序列<code>X = {A, B, C, B, D, A, B}</code>的子序列，相应的递增下标序列为<code>{2, 3, 5, 7}</code>。<br>给定两个序列X和Y，当另一序列Z既是X的子序列又是Y的子序列时，称Z是序列X和Y的公共子序列。<br>例如，若<code>X = {A, B, C, B, D, A, B}</code>，<code>Y = {B, D, C, A, B, A}</code>，序列<code>{B, C, A}</code>是X和Y的一个公共子序列，但它不是X和Y的最长公共子序列。序列<code>{B, C, B, A}</code>也是X和Y的一个公共子序列，它的长度为4，而且它是X和Y的最长公共子序列，因为X和Y没有长度大于4的公共子序列。</p><h3 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h3><p>给定两个序列<code>X = {x1, x2, ..., xm}</code>和<code>Y = {y1, y2, ..., ym}</code>，找出X和Y的最长公共子序列。</p><h3 id="按照DP算法设计的各个步骤求解"><a href="#按照DP算法设计的各个步骤求解" class="headerlink" title="按照DP算法设计的各个步骤求解"></a>按照DP算法设计的各个步骤求解</h3><ol><li><p>最长公共子序列结构<br>设序列<code>X = {x1, x2, ..., xm}</code>和<code>Y = {y1, y2, ..., yn}</code>的最长公共子序列为<code>Z = {z1, z2, ..., zk}</code>，则  </p><ol><li>若<code>xm = yn</code>，则<code>zk = xm = yn</code>，且Z</li></ol></li><li><p>子问题的递归结构</p></li><li>计算最优值</li><li>构造最长公共子序列</li><li>算法的改进</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（以下简称DP）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://codingdoge.cn/categories/Algorithm/"/>
    
    
  </entry>
  
</feed>
